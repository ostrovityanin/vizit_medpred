/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–µ audio-notifier
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const { logger } = require('./logger');
const { chunkText } = require('./helpers');

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è Telegram Bot API
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number|string} chatId - ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –∏–∑ .env)
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendMessage(text, chatId = TELEGRAM_CHAT_ID) {
  try {
    if (!text || !chatId) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ ID —á–∞—Ç–∞');
      return false;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    const textChunks = chunkText(text);
    
    for (const chunk of textChunks) {
      await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {
        chat_id: chatId,
        text: chunk,
        parse_mode: 'HTML'
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
      if (textChunks.length > 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
    
    if (error.response) {
      logger.error(`–û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`);
    }
    
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ Telegram
 * @param {string} filePath - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 * @param {string} caption - –ü–æ–¥–ø–∏—Å—å –∫ –∞—É–¥–∏–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @param {number|string} chatId - ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –∏–∑ .env)
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendAudioFile(filePath, caption = '', chatId = TELEGRAM_CHAT_ID) {
  try {
    if (!filePath || !fs.existsSync(filePath)) {
      logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - ${filePath}`);
      return false;
    }

    const form = new FormData();
    form.append('chat_id', chatId);
    form.append('audio', fs.createReadStream(filePath));
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 1024 —Å–∏–º–≤–æ–ª–∞–º–∏)
    if (caption) {
      form.append('caption', caption.length > 1024 ? caption.substring(0, 1021) + '...' : caption);
      // –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
      form.append('parse_mode', 'HTML');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    const response = await axios.post(`${TELEGRAM_API_URL}/sendAudio`, form, {
      headers: form.getHeaders()
    });
    
    logger.info(`–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${chatId}: ${filePath}`);
    if (caption) {
      logger.info(`–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –∫ –∞—É–¥–∏–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π: ${caption.substring(0, 50)}...`);
    }
    return response.data.ok;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Telegram: ${error.message}`);
    
    if (error.response) {
      logger.error(`–û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`);
    }
    
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ Telegram
 * @param {string} filePath - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 * @param {string} transcription - –¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 * @param {object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
 * @param {number|string} chatId - ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –∏–∑ .env)
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendAudioWithTranscription(filePath, transcription, metadata = {}, chatId = TELEGRAM_CHAT_ID) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const headerText = formatRecordingHeader(metadata);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await sendMessage(headerText, chatId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    let audioCaption = '';
    const MAX_CAPTION_LENGTH = 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –≤ Telegram
    
    if (transcription) {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
      const transcriptionPreview = transcription.length > 800 
        ? transcription.substring(0, 790) + '...' 
        : transcription;
        
      const shortTranscription = `<b>üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>\n\n<i>${transcriptionPreview}</i>`;
      
      if (shortTranscription.length <= MAX_CAPTION_LENGTH) {
        audioCaption = shortTranscription;
        
        // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –±—ã–ª–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º
        if (transcription.length > 800) {
          audioCaption += '\n\n<i>–ü–æ–∫–∞–∑–∞–Ω–∞ —á–∞—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>';
        }
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –≤ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É
    const audioSent = await sendAudioFile(filePath, audioCaption, chatId);
    
    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª–∏–Ω–Ω–∞—è, –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if (transcription && transcription.length > 300) {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è
      const transcriptionParts = chunkText(transcription, 3000);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      await sendMessage(`<b>üìù –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏:</b>`, chatId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      for (let i = 0; i < transcriptionParts.length; i++) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —á–∞—Å—Ç–µ–π –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        let partText = transcriptionParts[i];
        if (transcriptionParts.length > 1) {
          partText = `<i>–ß–∞—Å—Ç—å ${i+1}/${transcriptionParts.length}</i>\n\n${partText}`;
        }
        
        await sendMessage(partText, chatId);
      }
    }
    
    return audioSent;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π: ${error.message}`);
    return false;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 * @param {object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
 */
function formatRecordingHeader(metadata = {}) {
  const {
    id,
    title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
    username = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    duration = 0,
    size = 0,
    createdAt,
    senderUsername = null,
    targetUsername = null,
    status = null
  } = metadata;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  let dateStr = '–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  if (createdAt) {
    const date = new Date(createdAt);
    dateStr = date.toLocaleString('ru-RU', { 
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric', 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  let sizeStr = '–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
  if (size) {
    if (size < 1024) {
      sizeStr = `${size} –±–∞–π—Ç`;
    } else if (size < 1024 * 1024) {
      sizeStr = `${(size / 1024).toFixed(1)} –ö–±`;
    } else {
      sizeStr = `${(size / (1024 * 1024)).toFixed(1)} –ú–±`;
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  let durationStr = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
  if (duration) {
    const minutes = Math.floor(duration / 60);
    const seconds = Math.floor(duration % 60);
    durationStr = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  let header = `<b>üéôÔ∏è –ù–æ–≤–∞—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å</b>\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  header += `üìü <b>ID –∑–∞–ø–∏—Å–∏:</b> ${id || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
  header += `üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${title}\n`;
  header += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${username}\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (senderUsername) {
    header += `üì§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> ${senderUsername}\n`;
  }
  if (targetUsername) {
    header += `üì• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> ${targetUsername}\n`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  header += `‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${durationStr}\n`;
  header += `üíæ <b>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</b> ${sizeStr}\n`;
  header += `üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> ${dateStr}\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
  if (status) {
    const statusEmoji = {
      'started': 'üü°',
      'completed': 'üü¢',
      'failed': 'üî¥',
      'pending': '‚ö™',
      'sent': 'üì®',
      'error': '‚ö†Ô∏è'
    };
    const emoji = statusEmoji[status] || '‚ùì';
    header += `${emoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${status}\n`;
  }
  
  return header;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Bot API
 * @returns {Promise<boolean>} - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
 */
async function checkTelegramApiAvailability() {
  try {
    const response = await axios.get(`${TELEGRAM_API_URL}/getMe`);
    return response.data.ok;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram API: ${error.message}`);
    return false;
  }
}

module.exports = {
  sendMessage,
  sendAudioFile,
  sendAudioWithTranscription,
  checkTelegramApiAvailability
};
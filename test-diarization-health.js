/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
 */

import axios from 'axios';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// URL –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
const DIARIZATION_SERVICE_URL = 'http://localhost:5050';
const SERVICE_DIR = path.join(__dirname, 'services', 'audio-diarization');

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
 */
async function startDiarizationService() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const python = process.platform === 'win32' ? 'python' : 'python3';
    const serviceProcess = spawn(python, ['run.py'], {
      cwd: SERVICE_DIR,
      stdio: ['ignore', 'pipe', 'pipe'],
      env: {
        ...process.env,
        PYTHONUNBUFFERED: '1'
      }
    });
    
    console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: ${serviceProcess.pid}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º stdout
    serviceProcess.stdout.on('data', (data) => {
      console.log(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è] ${data.toString().trim()}`);
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º stderr
    serviceProcess.stderr.on('data', (data) => {
      console.error(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è ERR] ${data.toString().trim()}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    let attempts = 0;
    const maxAttempts = 10;
    const checkInterval = setInterval(async () => {
      try {
        attempts++;
        const response = await axios.get(`${DIARIZATION_SERVICE_URL}/health`, { timeout: 1000 });
        
        if (response.status === 200) {
          clearInterval(checkInterval);
          console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ ${attempts} –ø–æ–ø—ã—Ç–∫–∏`);
          console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
          console.log(`   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${response.data.uptime.toFixed(2)} —Å–µ–∫`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          resolve({
            process: serviceProcess,
            pid: serviceProcess.pid,
            url: DIARIZATION_SERVICE_URL,
            status: response.data
          });
        }
      } catch (error) {
        if (attempts >= maxAttempts) {
          clearInterval(checkInterval);
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
          try {
            serviceProcess.kill();
          } catch (killError) {
            console.error(`   - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${killError.message}`);
          }
          
          reject(new Error(`–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`));
        } else {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})...`);
        }
      }
    }, 1000);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫
    setTimeout(() => {
      clearInterval(checkInterval);
      if (attempts >= maxAttempts) {
        console.error(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (${maxAttempts} —Å–µ–∫—É–Ω–¥)`);
        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞'));
      }
    }, (maxAttempts + 1) * 1000);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    serviceProcess.on('close', (code) => {
      if (code !== 0) {
        clearInterval(checkInterval);
        console.error(`‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
        reject(new Error(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`));
      }
    });
  });
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 * @param {Object} serviceInfo –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
 */
function stopDiarizationService(serviceInfo) {
  try {
    console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (PID: ${serviceInfo.pid})...`);
    
    if (serviceInfo.process) {
      serviceInfo.process.kill();
      console.log('‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞: ${error.message}`);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
 */
async function runHealthTest() {
  console.log('üî¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏\n');
  
  let serviceInfo = null;
  
  try {
    // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    serviceInfo = await startDiarizationService();
    
    // –®–∞–≥ 2: –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É
    for (let i = 0; i < 5; i++) {
      try {
        const response = await axios.get(`${DIARIZATION_SERVICE_URL}/health`, { timeout: 1000 });
        console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ #${i+1}:`);
        console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
        console.log(`   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${response.data.uptime.toFixed(2)} —Å–µ–∫`);
        console.log(`   - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${response.data.timestamp}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ #${i+1}: ${error.message}`);
      }
      
      if (i < 4) {
        console.log(`\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—É...`);
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  } finally {
    // –®–∞–≥ 3: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
    if (serviceInfo) {
      stopDiarizationService(serviceInfo);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
runHealthTest();
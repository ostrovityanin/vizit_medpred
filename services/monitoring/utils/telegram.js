/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
 */
const TelegramBot = require('node-telegram-bot-api');
const { logger } = require('./logger');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

let bot = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
function initBot() {
  if (!token || !chatId) {
    logger.warn('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
    return false;
  }
  
  try {
    bot = new TelegramBot(token, { polling: false });
    logger.info('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ${error.message}`);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendTelegramMessage(message) {
  if (!bot) {
    if (!initBot()) {
      return false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (!token || !chatId) {
    logger.warn('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram');
    return false;
  }
  
  try {
    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Telegram
 * @param {Object} statusReport - –û—Ç—á–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendStatusReport(statusReport) {
  const { time, services, overallStatus } = statusReport;
  
  let statusEmoji = 'üü¢';
  if (overallStatus === 'warning') statusEmoji = 'üü°';
  if (overallStatus === 'critical') statusEmoji = 'üî¥';
  
  let message = `<b>${statusEmoji} –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: ${time}</b>\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–∏—Å–µ
  for (const service of services) {
    let serviceEmoji = 'üü¢';
    if (service.status === 'warning') serviceEmoji = 'üü°';
    if (service.status === 'critical') serviceEmoji = 'üî¥';
    
    message += `${serviceEmoji} <b>${service.name}</b>: ${service.status.toUpperCase()}\n`;
    if (service.message) {
      message += `   <i>${service.message}</i>\n`;
    }
    message += `   –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${service.responseTime}ms\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å—Ç–æ—è, –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    if (service.downtime) {
      message += `   –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: ${service.downtime}\n`;
    }
    
    message += '\n';
  }
  
  return sendTelegramMessage(message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –≤ Telegram
 * @param {string} serviceName - –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
 * @param {string} error - –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendErrorAlert(serviceName, error) {
  const message = `üî¥ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n` +
                 `<b>–°–µ—Ä–≤–∏—Å:</b> ${serviceName}\n` +
                 `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}\n` +
                 `<b>–û—à–∏–±–∫–∞:</b> ${error}\n\n` +
                 `–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.`;
  
  return sendTelegramMessage(message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤ Telegram
 * @param {string} serviceName - –ò–º—è —Å–µ—Ä–≤–∏—Å–∞
 * @param {string} downtime - –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendRecoveryAlert(serviceName, downtime) {
  const message = `üü¢ <b>–°–ï–†–í–ò–° –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n` +
                 `<b>–°–µ—Ä–≤–∏—Å:</b> ${serviceName}\n` +
                 `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}\n` +
                 `<b>–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è:</b> ${downtime}`;
  
  return sendTelegramMessage(message);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
initBot();

module.exports = {
  sendTelegramMessage,
  sendStatusReport,
  sendErrorAlert,
  sendRecoveryAlert
};
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * –í–µ—Ä—Å–∏—è 2.0 - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */

import fs from 'fs';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è exec –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const execAsync = promisify(exec);

// –ü—É—Ç–∏ –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  pidFile: 'monitoring-service.pid',
  logFile: 'monitoring-service.log',
  processName: 'simple-monitor.mjs'
};

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∏–º–µ–Ω–∏
 * @returns {Promise<Array<number>>} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö PID
 */
async function findMonitoringProcesses() {
  try {
    const { stdout } = await execAsync(`ps -ef | grep "${CONFIG.processName}" | grep -v grep | awk '{print $2}'`);
    const pids = stdout.trim().split('\n').filter(Boolean).map(Number);
    return pids;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:`, error.message);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
 * @param {number} pid PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
 */
function isProcessRunning(pid) {
  try {
    process.kill(pid, 0);
    return true;
  } catch (e) {
    return false;
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
 * @param {number} pid PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function stopProcess(pid) {
  try {
    if (!isProcessRunning(pid)) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return false;
    }
    
    console.log(`üõë –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É ${pid}...`);
    process.kill(pid, 'SIGTERM');
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    if (isProcessRunning(pid)) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å ${pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ SIGTERM, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL...`);
      process.kill(pid, 'SIGKILL');
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    if (!isProcessRunning(pid)) {
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ${pid}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}:`, error.message);
    return false;
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function stopMonitoringService() {
  console.log(`üîç –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ PID —Ñ–∞–π–ª
    let foundPid = null;
    
    if (fs.existsSync(CONFIG.pidFile)) {
      foundPid = parseInt(fs.readFileSync(CONFIG.pidFile, 'utf8').trim());
      console.log(`üîç –ù–∞–π–¥–µ–Ω PID –≤ —Ñ–∞–π–ª–µ: ${foundPid}`);
      
      if (isProcessRunning(foundPid)) {
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${foundPid} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      } else {
        console.log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${foundPid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        foundPid = null;
      }
    } else {
      console.log(`‚ö†Ô∏è PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
    
    // –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ PID —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID –Ω–µ –∑–∞–ø—É—â–µ–Ω
    const foundPids = await findMonitoringProcesses();
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${foundPids.length}`);
    
    if (foundPids.length === 0 && !foundPid) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
      
      // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç
      if (fs.existsSync(CONFIG.pidFile)) {
        fs.unlinkSync(CONFIG.pidFile);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π PID —Ñ–∞–π–ª`);
      }
      
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ PID —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if (foundPid && !foundPids.includes(foundPid)) {
      foundPids.push(foundPid);
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    for (const pid of foundPids) {
      await stopProcess(pid);
    }
    
    // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if (fs.existsSync(CONFIG.pidFile)) {
      fs.unlinkSync(CONFIG.pidFile);
      console.log(`üóëÔ∏è PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω`);
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
    fs.appendFileSync(CONFIG.logFile, `\n[${new Date().toISOString()}] –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n`);
    
    console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:`, error.message);
  }
}

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
stopMonitoringService();
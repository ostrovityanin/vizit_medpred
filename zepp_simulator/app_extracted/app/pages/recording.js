import { createElement } from 'zos-ui';
import { back } from '@zos/router';
import { showToast, showDialog } from '@zos/interaction';
import { vibrate } from '@zos/vibrator';
import { recorder } from '../utils/recorder';
import { finishRecording } from '../utils/api';
import { formatTime } from '../utils/format';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è UI
const SCREEN_WIDTH = 480;
const SCREEN_HEIGHT = 480;

const styles = {
  mainContainer: {
    width: SCREEN_WIDTH,
    height: SCREEN_HEIGHT,
    backgroundColor: '#000000',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center'
  },
  statusText: {
    fontSize: 32,
    color: '#ffffff',
    textAlign: 'center',
    marginBottom: 20
  },
  timerText: {
    fontSize: 64,
    color: '#ffffff',
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 50
  },
  buttonContainer: {
    width: SCREEN_WIDTH,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 20
  },
  button: {
    width: 120,
    height: 120,
    borderRadius: 60,
    margin: 15,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center'
  },
  recordButton: {
    backgroundColor: '#ff4455'
  },
  stopButton: {
    backgroundColor: '#444444'
  },
  buttonIcon: {
    fontSize: 50,
    color: '#ffffff'
  },
  buttonText: {
    fontSize: 16,
    color: '#ffffff',
    marginTop: 5
  },
  fragmentInfo: {
    fontSize: 20, 
    color: '#999999',
    marginTop: 15
  },
  pulsatingCircle: {
    width: 200,
    height: 200,
    borderRadius: 100,
    backgroundColor: '#ff4455',
    opacity: 0.2,
    position: 'absolute'
  }
};

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–ø–∏—Å–∏
Page({
  onInit() {
    this.isRecording = false;
    this.duration = 0;
    this.fragments = 0;
    this.sessionId = null;
    this.timer = null;
    this.pulseAnimation = null;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
    recorder.setStatusChangeListener(this.onRecordingStatusChange.bind(this));
  },
  
  build() {
    const mainContainer = createElement('view', {
      style: styles.mainContainer
    });
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä—É–≥ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏)
    if (this.isRecording) {
      const pulsatingCircle = createElement('view', {
        style: {
          ...styles.pulsatingCircle,
          animation: {
            keyframes: [
              { opacity: 0.1, transform: 'scale(0.8)' },
              { opacity: 0.2, transform: 'scale(1.1)' },
              { opacity: 0.1, transform: 'scale(0.8)' },
            ],
            duration: 2000,
            iterations: 'infinite'
          }
        }
      });
      
      mainContainer.appendChild(pulsatingCircle);
    }
    
    // –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    mainContainer.appendChild(
      createElement('text', {
        style: styles.statusText,
        text: this.isRecording ? '–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å...' : '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏'
      })
    );
    
    // –¢–∞–π–º–µ—Ä
    mainContainer.appendChild(
      createElement('text', {
        style: styles.timerText,
        text: formatTime(this.duration)
      })
    );
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö (–µ—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å)
    if (this.isRecording && this.fragments > 0) {
      mainContainer.appendChild(
        createElement('text', {
          style: styles.fragmentInfo,
          text: `–§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${this.fragments}`
        })
      );
    }
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const buttonContainer = createElement('view', {
      style: styles.buttonContainer
    });
    
    if (this.isRecording) {
      // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      const stopButton = createElement('view', {
        style: {
          ...styles.button,
          ...styles.stopButton
        },
        onclick: () => {
          this.stopRecording();
        }
      });
      
      stopButton.appendChild(
        createElement('text', {
          style: styles.buttonIcon,
          text: '‚ñ†'
        })
      );
      
      stopButton.appendChild(
        createElement('text', {
          style: styles.buttonText,
          text: '–°–¢–û–ü'
        })
      );
      
      buttonContainer.appendChild(stopButton);
    } else {
      // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏
      const recordButton = createElement('view', {
        style: {
          ...styles.button,
          ...styles.recordButton
        },
        onclick: () => {
          this.startRecording();
        }
      });
      
      recordButton.appendChild(
        createElement('text', {
          style: styles.buttonIcon,
          text: 'üéôÔ∏è'
        })
      );
      
      recordButton.appendChild(
        createElement('text', {
          style: styles.buttonText,
          text: '–ó–ê–ü–ò–°–¨'
        })
      );
      
      buttonContainer.appendChild(recordButton);
    }
    
    mainContainer.appendChild(buttonContainer);
    
    return mainContainer;
  },
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
  onRecordingStatusChange(status) {
    this.isRecording = status.isRecording;
    this.duration = status.duration || 0;
    this.sessionId = status.sessionId;
    this.fragments = status.fragments || 0;
    
    if (!this.isRecording && status.status === 'completed') {
      // –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
      this.showCompletionDialog();
    }
    
    this.onAppear(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
  },
  
  // –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
  startRecording() {
    const success = recorder.startRecording();
    
    if (success) {
      this.isRecording = true;
      this.duration = 0;
      this.fragments = 0;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      this.timer = setInterval(() => {
        this.duration++;
        this.onAppear(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
      }, 1000);
      
      vibrate({ mode: 'medium' });
    } else {
      showToast({ content: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å' });
    }
  },
  
  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
  async stopRecording() {
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = null;
    }
    
    const result = await recorder.stopRecording();
    
    if (result) {
      vibrate({ mode: 'long' });
      this.isRecording = false;
      this.onAppear(); // –û–±–Ω–æ–≤–ª—è–µ–º UI
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      this.showCompletionDialog();
    } else {
      showToast({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏' });
    }
  },
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  showCompletionDialog() {
    if (!this.sessionId) return;
    
    showDialog({
      title: '–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      content: `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatTime(this.duration)}
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${this.fragments}
                
                –ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.`,
      buttons: [
        {
          text: '–û–ö',
          press: async () => {
            try {
              showToast({ content: '–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...' });
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
              const result = await finishRecording(this.sessionId);
              
              if (result && !result.error) {
                showToast({ content: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
              } else {
                showToast({ content: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ' });
              }
              
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
              setTimeout(() => {
                back();
              }, 1000);
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
              showToast({ content: '–û—à–∏–±–∫–∞: ' + error.message });
            }
          }
        }
      ]
    });
  },
  
  onDestroy() {
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = null;
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤—Å–µ –µ—â–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ
    if (this.isRecording) {
      recorder.stopRecording('page_closed');
    }
  }
});
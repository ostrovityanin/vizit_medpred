/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö
 * –º–æ–¥–µ–ª–µ–π OpenAI (whisper-1, gpt-4o, gpt-4o-mini) –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç
 * –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
 */

import fs from 'fs';
import path from 'path';
import axios from 'axios';
import FormData from 'form-data';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { spawn } from 'child_process';
import dotenv from 'dotenv';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// API –∫–ª—é—á OpenAI
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_LANGUAGES = ['ru', 'en']; // –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —è–∑—ã–∫–∏
const TEST_FILE_DURATION = 5; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @param {string} outputPath –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
 * @param {string} format –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (mp3, wav, m4a)
 * @param {number} duration –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
function generateTestAudio(outputPath, format = 'mp3', duration = 5) {
  return new Promise((resolve, reject) => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const dir = path.dirname(outputPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    
    console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: ${outputPath} (${duration} —Å–µ–∫, —Ñ–æ—Ä–º–∞—Ç: ${format})`);
    
    // –ß–∞—Å—Ç–æ—Ç–∞ —Ç–æ–Ω–∞ –¥–ª—è –∞—É–¥–∏–æ
    const frequency = 440; // 440 –ì—Ü (–Ω–æ—Ç–∞ A4)
    
    // –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª sine –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    const ffmpeg = spawn('ffmpeg', [
      '-y', // –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      '-f', 'lavfi', // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ lavfi
      '-i', `sine=frequency=${frequency}:duration=${duration}`, // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—É—Å–æ–∏–¥—É
      '-ar', '44100', // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 44.1 –∫–ì—Ü
      '-ac', '1', // –ú–æ–Ω–æ –∞—É–¥–∏–æ
      outputPath // –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    ]);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    ffmpeg.stderr.on('data', (data) => {
      // FFmpeg –ø–∏—à–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ stderr
      // console.error(`FFmpeg: ${data}`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    ffmpeg.on('close', (code) => {
      if (code === 0) {
        console.log(`–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
        resolve(outputPath);
      } else {
        const error = `FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: ${code}`;
        console.error(error);
        reject(new Error(error));
      }
    });
  });
}

/**
 * –ö–æ–¥–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base64
 * @param {string} audioFilePath –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 * @returns {string|null} –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
function encodeAudioToBase64(audioFilePath) {
  try {
    const audioData = fs.readFileSync(audioFilePath);
    return audioData.toString('base64');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: ${error.message}`);
    return null;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI Audio API
 * @param {string} audioFilePath –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 * @param {string} model –ú–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (whisper-1)
 * @param {string} language –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, etc.)
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
async function transcribeWithAudioAPI(audioFilePath, model = 'whisper-1', language = null) {
  try {
    console.log(`üìù –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –º–æ–¥–µ–ª—å—é ${model} (—è–∑—ã–∫: ${language || '–∞–≤—Ç–æ'})...`);
    const startTime = Date.now();
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(audioFilePath));
    formData.append('model', model);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (language) {
      formData.append('language', language);
    }
    
    formData.append('response_format', 'json');
    
    const response = await axios.post(
      'https://api.openai.com/v1/audio/transcriptions',
      formData,
      {
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          ...formData.getHeaders()
        }
      }
    );
    
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration} —Å–µ–∫`);
    
    return {
      model,
      language: language || 'auto',
      duration: parseFloat(duration),
      transcript: response.data.text,
      audioPath: audioFilePath
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (${model}): ${error.message}`);
    
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    }
    
    return {
      model,
      language: language || 'auto',
      duration: 0,
      transcript: `–û—à–∏–±–∫–∞: ${error.message}`,
      error: true,
      audioPath: audioFilePath
    };
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT-4o Chat API
 * @param {string} audioFilePath –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 * @param {string} modelName –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (gpt-4o, gpt-4o-mini)
 * @param {string} language –ö–æ–¥ —è–∑—ã–∫–∞ (ru, en, etc.)
 * @returns {Promise<object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
async function transcribeWithGPT4oChat(audioFilePath, modelName = 'gpt-4o', language = null) {
  try {
    console.log(`üìù –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –º–æ–¥–µ–ª—å—é ${modelName} —á–µ—Ä–µ–∑ Chat API (—è–∑—ã–∫: ${language || '–∞–≤—Ç–æ'})...`);
    const startTime = Date.now();
    
    // –ö–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ Base64
    const audioBase64 = encodeAudioToBase64(audioFilePath);
    if (!audioBase64) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME-—Ç–∏–ø–∞
    const fileExtension = path.extname(audioFilePath).toLowerCase();
    let mimeType;
    
    switch (fileExtension) {
      case '.mp3':
        mimeType = 'audio/mp3';
        break;
      case '.mp4':
      case '.m4a':
        mimeType = 'audio/mp4';
        break;
      case '.mpeg':
        mimeType = 'audio/mpeg';
        break;
      case '.mpga':
        mimeType = 'audio/mpeg';
        break;
      case '.wav':
        mimeType = 'audio/wav';
        break;
      case '.webm':
        mimeType = 'audio/webm';
        break;
      default:
        mimeType = 'audio/mp3'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    let promptText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –∞—É–¥–∏–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.";
    
    if (language === 'ru') {
      promptText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –∞—É–¥–∏–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.";
    } else if (language === 'en') {
      promptText = "Please transcribe this audio and provide a complete transcription in English. Only the text from the audio, without comments.";
    }
    
    const payload = {
      model: modelName,
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: promptText
            },
            {
              type: "input_audio",
              input_audio: `data:${mimeType};base64,${audioBase64}`
            }
          ]
        }
      ]
    };
    
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      payload,
      {
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    const duration = ((Date.now() - startTime) / 1000).toFixed(2);
    console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Chat API –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration} —Å–µ–∫`);
    
    return {
      model: modelName,
      language: language || 'auto',
      duration: parseFloat(duration),
      transcript: response.data.choices[0].message.content,
      audioPath: audioFilePath
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Chat API (${modelName}): ${error.message}`);
    
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
    }
    
    return {
      model: modelName,
      language: language || 'auto',
      duration: 0,
      transcript: `–û—à–∏–±–∫–∞: ${error.message}`,
      error: true,
      audioPath: audioFilePath
    };
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
async function runComparisonTests() {
  if (!OPENAI_API_KEY) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY.');
    return;
  }
  
  console.log('üìä –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const testAudioDir = path.join(__dirname, 'test_audio');
  if (!fs.existsSync(testAudioDir)) {
    fs.mkdirSync(testAudioDir, { recursive: true });
  }
  
  // –§–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const formats = ['mp3', 'wav', 'm4a'];
  const testFiles = [];
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
  try {
    for (const format of formats) {
      const filePath = path.join(testAudioDir, `test_tone.${format}`);
      await generateTestAudio(filePath, format, TEST_FILE_DURATION);
      testFiles.push(filePath);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: ${error.message}`);
    return;
  }
  
  // –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const models = [
    { method: transcribeWithAudioAPI, args: [null, 'whisper-1', null], name: 'Whisper API' },
    { method: transcribeWithGPT4oChat, args: [null, 'gpt-4o', null], name: 'GPT-4o' },
    { method: transcribeWithGPT4oChat, args: [null, 'gpt-4o-mini', null], name: 'GPT-4o-mini' }
  ];
  
  const allResults = [];
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —è–∑—ã–∫–∞
  for (const audioFile of testFiles) {
    for (const language of TEST_LANGUAGES) {
      for (const model of models) {
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –∑–∞–º–µ–Ω—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
        const args = [...model.args];
        args[0] = audioFile; // –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        args[2] = language; // –Ø–∑—ã–∫
        
        console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${model.name} –¥–ª—è —è–∑—ã–∫–∞ ${language}, —Ñ–∞–π–ª: ${path.basename(audioFile)}...`);
        
        try {
          const result = await model.method(...args);
          allResults.push(result);
          
          // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          console.log(`   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.transcript.substring(0, 50)}${result.transcript.length > 50 ? '...' : ''}`);
          console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.duration} —Å–µ–∫`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`);
        }
      }
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
  const resultsPath = path.join(__dirname, 'transcription-models-comparison.json');
  fs.writeFileSync(resultsPath, JSON.stringify(allResults, null, 2));
  
  console.log(`\nüíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${resultsPath}`);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìã –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º –∏ —è–∑—ã–∫–∞–º
  const modelStats = {};
  
  for (const result of allResults) {
    const modelKey = `${result.model}-${result.language}`;
    
    if (!modelStats[modelKey]) {
      modelStats[modelKey] = {
        model: result.model,
        language: result.language,
        count: 0,
        totalDuration: 0,
        errors: 0,
        avgDuration: 0
      };
    }
    
    modelStats[modelKey].count++;
    
    if (result.error) {
      modelStats[modelKey].errors++;
    } else {
      modelStats[modelKey].totalDuration += result.duration;
    }
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  Object.values(modelStats).forEach(stat => {
    const successfulTests = stat.count - stat.errors;
    stat.avgDuration = successfulTests > 0 ? (stat.totalDuration / successfulTests) : 0;
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–æ–¥–µ–ª–∏ –∏ —è–∑—ã–∫—É
  const sortedStats = Object.values(modelStats).sort((a, b) => {
    if (a.model !== b.model) return a.model.localeCompare(b.model);
    return a.language.localeCompare(b.language);
  });
  
  // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ –ú–æ–¥–µ–ª—å          ‚îÇ –Ø–∑—ã–∫    ‚îÇ –¢–µ—Å—Ç—ã ‚îÇ –û—à–∏–±–∫–∏  ‚îÇ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è  ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  
  for (const stat of sortedStats) {
    console.log(
      `‚îÇ ${stat.model.padEnd(15)} ‚îÇ ${stat.language.padEnd(7)} ‚îÇ ${stat.count.toString().padEnd(5)} ‚îÇ ${stat.errors.toString().padEnd(7)} ‚îÇ ${stat.avgDuration.toFixed(2).padEnd(14)} ‚îÇ`
    );
  }
  
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
  const statsPath = path.join(__dirname, 'transcription-models-stats.json');
  fs.writeFileSync(statsPath, JSON.stringify(sortedStats, null, 2));
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${statsPath}`);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
  const reportPath = path.join(__dirname, 'transcription_models_report.md');
  
  let reportContent = `# –û—Ç—á–µ—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n\n`;
  reportContent += `*–î–∞—Ç–∞: ${new Date().toISOString().split('T')[0]}*\n\n`;
  reportContent += `## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n`;
  reportContent += `- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:** ${allResults.length}\n`;
  reportContent += `- **–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–¥–µ–ª–∏:** ${[...new Set(allResults.map(r => r.model))].join(', ')}\n`;
  reportContent += `- **–Ø–∑—ã–∫–∏:** ${TEST_LANGUAGES.join(', ')}\n`;
  reportContent += `- **–§–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ:** ${formats.join(', ')}\n\n`;
  
  reportContent += `## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º –∏ —è–∑—ã–∫–∞–º\n\n`;
  reportContent += `| –ú–æ–¥–µ–ª—å | –Ø–∑—ã–∫ | –ö–æ–ª-–≤–æ —Ç–µ—Å—Ç–æ–≤ | –û—à–∏–±–∫–∏ | –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—Å) |\n`;
  reportContent += `|--------|------|---------------|--------|-------------------|\n`;
  
  for (const stat of sortedStats) {
    reportContent += `| ${stat.model} | ${stat.language} | ${stat.count} | ${stat.errors} | ${stat.avgDuration.toFixed(2)} |\n`;
  }
  
  reportContent += `\n## –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  const exampleResults = allResults.filter(r => !r.error).slice(0, 6);
  
  for (const example of exampleResults) {
    reportContent += `### ${example.model} (${example.language})\n\n`;
    reportContent += `- **–§–∞–π–ª:** \`${path.basename(example.audioPath)}\`\n`;
    reportContent += `- **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** ${example.duration} —Å–µ–∫\n`;
    reportContent += `- **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:** "${example.transcript}"\n\n`;
  }
  
  reportContent += `## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n`;
  reportContent += `–î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç OpenAI. `;
  reportContent += `–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ${TEST_FILE_DURATION} —Å–µ–∫—É–Ω–¥ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö.`;
  
  fs.writeFileSync(reportPath, reportContent);
  
  console.log(`üìù –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
runComparisonTests();
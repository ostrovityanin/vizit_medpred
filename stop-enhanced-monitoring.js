/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * –í–µ—Ä—Å–∏—è 3.0 - –° —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
import fs from 'fs';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  pidFile: 'enhanced-monitoring.pid',
  statusFile: 'enhanced-monitoring.status'
};

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∏–º–µ–Ω–∏
 * @returns {Promise<Array<number>>} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö PID
 */
async function findMonitoringProcesses() {
  try {
    const processName = 'enhanced-monitor.mjs';
    let pids = [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É ps –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    try {
      const output = execSync(`ps aux | grep "${processName}" | grep -v grep`).toString();
      const lines = output.split('\n').filter(Boolean);
      
      for (const line of lines) {
        const parts = line.trim().split(/\s+/);
        if (parts.length > 1) {
          const pid = parseInt(parts[1]);
          if (!isNaN(pid)) {
            pids.push(pid);
            console.log(`üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: PID ${pid}`);
          }
        }
      }
    } catch (e) {
      // –ï—Å–ª–∏ grep –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ—Ü–µ—Å—Å—ã, –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
      console.log(`üîç –ü—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ ps`);
    }
    
    return pids;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:`, error.message);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
 * @param {number} pid PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
 */
function isProcessRunning(pid) {
  try {
    process.kill(pid, 0);
    return true;
  } catch (e) {
    return false;
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
 * @param {number} pid PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function stopProcess(pid) {
  try {
    console.log(`üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID ${pid}...`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM
    process.kill(pid, 'SIGTERM');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    if (!isProcessRunning(pid)) {
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      return true;
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL
    console.log(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL...`);
    process.kill(pid, 'SIGKILL');
    
    // –ï—â–µ —Ä–∞–∑ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (!isProcessRunning(pid)) {
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGKILL)`);
      return true;
    } else {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å PID ${pid}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å PID ${pid}:`, error.message);
    return false;
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function stopMonitoringService() {
  console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...`);
  
  let success = false;
  let pidsFromFile = [];
  
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å PID –∏–∑ —Ñ–∞–π–ª–∞
  try {
    if (fs.existsSync(CONFIG.pidFile)) {
      const pid = parseInt(fs.readFileSync(CONFIG.pidFile, 'utf8').trim());
      if (!isNaN(pid)) {
        pidsFromFile.push(pid);
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω PID –≤ —Ñ–∞–π–ª–µ: ${pid}`);
      } else {
        console.log(`‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PID –≤ —Ñ–∞–π–ª–µ`);
      }
    } else {
      console.log(`‚ö†Ô∏è PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${CONFIG.pidFile}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PID —Ñ–∞–π–ª–∞:`, error.message);
  }
  
  // –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∏–º–µ–Ω–∏
  const pidsFromSearch = await findMonitoringProcesses();
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ PID (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
  const allPids = [...new Set([...pidsFromFile, ...pidsFromSearch])];
  
  if (allPids.length === 0) {
    console.log(`‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
  } else {
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${allPids.length}`);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    for (const pid of allPids) {
      if (isProcessRunning(pid)) {
        const stopped = await stopProcess(pid);
        success = success || stopped;
      } else {
        console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
      }
    }
  }
  
  // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
  try {
    if (fs.existsSync(CONFIG.pidFile)) {
      fs.unlinkSync(CONFIG.pidFile);
      console.log(`üóëÔ∏è PID —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${CONFIG.pidFile}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ PID —Ñ–∞–π–ª–∞:`, error.message);
  }
  
  // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  try {
    if (fs.existsSync(CONFIG.statusFile)) {
      fs.unlinkSync(CONFIG.statusFile);
      console.log(`üóëÔ∏è –§–∞–π–ª —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω: ${CONFIG.statusFile}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞:`, error.message);
  }
  
  if (success) {
    console.log(`‚úÖ –°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
  } else if (allPids.length > 0) {
    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
  } else {
    console.log(`‚ÑπÔ∏è –°–ª—É–∂–±–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞`);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
stopMonitoringService();
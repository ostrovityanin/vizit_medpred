/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤.
 */

import fetch from 'node-fetch';
import fs from 'fs';
import FormData from 'form-data';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ë–∞–∑–æ–≤—ã–π URL API
const API_URL = 'http://localhost:5000/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
function log(message, type = 'info') {
  const types = {
    info: 'üìù',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    request: 'üì§',
    response: 'üì•'
  };
  
  const icon = types[type] || types.info;
  console.log(`${icon} ${message}`);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
 */
async function testHealthEndpoint() {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /health...', 'info');
  
  try {
    const response = await fetch(`${API_URL}/health`);
    
    if (!response.ok) {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ${response.status} ${response.statusText}`, 'error');
      return false;
    }
    
    const data = await response.json();
    log(`–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${JSON.stringify(data)}`, 'success');
    return true;
  } catch (error) {
    log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: ${error.message}`, 'error');
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
 */
async function testGetRecordings() {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π...', 'info');
  
  try {
    const response = await fetch(`${API_URL}/admin/recordings`);
    
    if (!response.ok) {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: ${response.status} ${response.statusText}`, 'error');
      return;
    }
    
    const recordings = await response.json();
    
    log(`–ü–æ–ª—É—á–µ–Ω–æ ${recordings.length} –∑–∞–ø–∏—Å–µ–π`, 'success');
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å—è—Ö
    if (recordings.length > 0) {
      const recentRecordings = recordings.slice(0, 3);
      
      log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:', 'info');
      recentRecordings.forEach((recording, index) => {
        log(`${index + 1}. ID: ${recording.id}, –í—Ä–µ–º—è: ${recording.timestamp}, –°—Ç–∞—Ç—É—Å: ${recording.status}`, 'info');
      });
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: ${error.message}`, 'error');
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é Whisper
 */
async function testWhisperTranscription() {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å Whisper...', 'info');
  
  // –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ
  const testAudioPath = path.join(__dirname, 'test_audio', 'short_test.mp3');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(testAudioPath)) {
    log('–¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é test_audio –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª short_test.mp3', 'error');
    return;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testAudioPath));
    formData.append('model', 'whisper-1');
    formData.append('language', 'ru');
    
    log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...', 'request');
    
    const response = await fetch(`${API_URL}/transcribe`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${response.status} ${response.statusText}`, 'error');
      log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${errorText}`, 'error');
      return;
    }
    
    const result = await response.json();
    
    log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', 'response');
    log(`–¢–µ–∫—Å—Ç: ${result.text}`, 'success');
    log(`–ú–æ–¥–µ–ª—å: ${result.model}`, 'info');
    log(`–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime} —Å–µ–∫`, 'info');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`, 'error');
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
 */
async function testComparisonTranscription() {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...', 'info');
  
  // –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ
  const testAudioPath = path.join(__dirname, 'test_audio', 'short_test.mp3');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(testAudioPath)) {
    log('–¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é test_audio –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª short_test.mp3', 'error');
    return;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testAudioPath));
    formData.append('language', 'ru');
    
    log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...', 'request');
    
    const response = await fetch(`${API_URL}/transcribe/compare`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${response.status} ${response.statusText}`, 'error');
      log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${errorText}`, 'error');
      return;
    }
    
    const result = await response.json();
    
    log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', 'response');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for (const [model, data] of Object.entries(result.results)) {
      if (data.error) {
        log(`${model}: –û—à–∏–±–∫–∞ - ${data.error}`, 'error');
      } else {
        log(`${model}: "${data.text}"`, 'success');
        log(`  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.processingTime} —Å–µ–∫`, 'info');
      }
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`, 'error');
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
 */
async function testDiarizationCompare() {
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π...', 'info');
  
  // –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ —Å –¥–∏–∞–ª–æ–≥–æ–º
  const testAudioPath = path.join(__dirname, 'test_audio', 'dialog_test.mp3');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(testAudioPath)) {
    log('–¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é test_audio –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª dialog_test.mp3', 'error');
    return;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('file', fs.createReadStream(testAudioPath));
    formData.append('minSpeakers', '2');
    formData.append('maxSpeakers', '4');
    
    log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π...', 'request');
    
    const response = await fetch(`${API_URL}/diarize/compare`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} ${response.statusText}`, 'error');
      log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${errorText}`, 'error');
      return;
    }
    
    const result = await response.json();
    
    log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π:', 'response');
    log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: ${result.metadata.num_speakers}`, 'info');
    log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${result.metadata.total_segments}`, 'info');
    
    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 —Å–µ–≥–º–µ–Ω—Ç–∞
    const segments = result.segments.slice(0, 3);
    segments.forEach((segment, index) => {
      log(`–°–µ–≥–º–µ–Ω—Ç ${index + 1} (–ì–æ–≤–æ—Ä—è—â–∏–π ${segment.speaker}):`, 'info');
      log(`  Whisper: "${segment.transcriptions.whisper}"`, 'info');
      log(`  GPT-4o-mini: "${segment.transcriptions.gpt4o_mini}"`, 'info');
      log(`  GPT-4o: "${segment.transcriptions.gpt4o}"`, 'info');
    });
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤', 'info');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  const isApiAvailable = await testHealthEndpoint();
  
  if (!isApiAvailable) {
    log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', 'error');
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–¥–º–∏–Ω–∫–∏
  await testGetRecordings();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  await testWhisperTranscription();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  await testComparisonTranscription();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
  await testDiarizationCompare();
  
  log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'info');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
main().catch(error => {
  log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.stack || error.message}`, 'error');
});
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
 * –í–µ—Ä—Å–∏—è 1.0 - –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
import { spawn, execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import dotenv from 'dotenv';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è ESM
dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  pidFile: 'monitoring-all.pid',
  logFile: 'monitoring-all.log',
  components: [
    {
      name: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
      script: './start-enhanced-monitoring.js',
      enabled: true
    },
    {
      name: 'API –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏',
      script: './start-diarization-service.js',
      enabled: true
    },
    {
      name: 'GPT-4o —Å–µ—Ä–≤–∏—Å',
      script: './start-gpt4o-service.js',
      enabled: true
    }
  ],
  checkDelay: 5000 // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
function log(message, level = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${level}] ${message}`;
  
  console.log(logMessage);
  
  try {
    fs.appendFileSync(CONFIG.logFile, logMessage + '\n');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${error.message}`);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç
 */
function isScriptRunning() {
  try {
    if (!fs.existsSync(CONFIG.pidFile)) {
      return false;
    }
    
    const pid = parseInt(fs.readFileSync(CONFIG.pidFile, 'utf8').trim());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    try {
      process.kill(pid, 0);
      log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å (PID: ${pid})`, 'WARN');
      return true;
    } catch (e) {
      log(`PID-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PID-—Ñ–∞–π–ª...`, 'WARN');
      fs.unlinkSync(CONFIG.pidFile);
      return false;
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${error.message}`, 'ERROR');
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
function checkDependencies() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'INFO');
  
  const requiredDeps = ['axios', 'node-telegram-bot-api', 'cron', 'dotenv'];
  let missingDeps = [];
  
  for (const dep of requiredDeps) {
    try {
      execSync(`npm list ${dep}`);
    } catch (error) {
      missingDeps.push(dep);
      log(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`, 'WARN');
    }
  }
  
  if (missingDeps.length > 0) {
    log(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`, 'ERROR');
    log(`–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: npm install ${missingDeps.join(' ')}`, 'INFO');
    return false;
  }
  
  log('–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'INFO');
  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Telegram
 */
function checkTelegramConfig() {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  if (!token) {
    log(`–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω TELEGRAM_BOT_TOKEN`, 'WARN');
  }
  
  if (!chatId) {
    log(`–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ID —á–∞—Ç–∞ TELEGRAM_CHAT_ID`, 'WARN');
  }
  
  if (!token || !chatId) {
    log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è!`, 'WARN');
    return false;
  }
  
  log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`, 'INFO');
  return true;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ PID
 */
function cleanupOldPids() {
  log('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö PID —Ñ–∞–π–ª–æ–≤...', 'INFO');
  
  const oldPids = [
    'enhanced-monitoring.pid',
    'monitoring-service.pid',
    'diarization-service.pid',
    'gpt4o-service.pid'
  ];
  
  for (const pidFile of oldPids) {
    try {
      if (fs.existsSync(pidFile)) {
        const pid = parseInt(fs.readFileSync(pidFile, 'utf8').trim());
        
        try {
          process.kill(pid, 0);
          log(`–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ${pidFile} (PID: ${pid})`, 'WARN');
        } catch (e) {
          log(`–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ PID —Ñ–∞–π–ª–∞: ${pidFile}`, 'INFO');
          fs.unlinkSync(pidFile);
        }
      }
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${pidFile}: ${error.message}`, 'ERROR');
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function startComponent(component) {
  log(`–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.name} (${component.script})`, 'INFO');
  
  return new Promise((resolve, reject) => {
    try {
      const process = spawn('node', [component.script], {
        stdio: 'inherit'
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
      const timeout = setTimeout(() => {
        log(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`, 'INFO');
        resolve(true);
      }, CONFIG.checkDelay);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–ø—É—Å–∫–∞
      process.on('error', (error) => {
        clearTimeout(timeout);
        log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${component.name}: ${error.message}`, 'ERROR');
        resolve(false);
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      process.on('exit', (code) => {
        clearTimeout(timeout);
        if (code !== 0) {
          log(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ ${code})`, 'ERROR');
          resolve(false);
        } else {
          // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è)
          log(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.name} –∑–∞–ø—É—â–µ–Ω –∏ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ`, 'INFO');
          resolve(true);
        }
      });
    } catch (error) {
      log(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ${component.name}: ${error.message}`, 'ERROR');
      reject(error);
    }
  });
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function startAllComponents() {
  log('–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...', 'INFO');
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –≤ —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  fs.writeFileSync(CONFIG.pidFile, `${process.pid}`);
  
  const results = [];
  
  for (const component of CONFIG.components) {
    if (component.enabled) {
      try {
        const success = await startComponent(component);
        results.push({
          name: component.name,
          success: success
        });
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        if (CONFIG.checkDelay > 0) {
          log(`–û–∂–∏–¥–∞–Ω–∏–µ ${CONFIG.checkDelay}ms –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...`, 'INFO');
          await new Promise(resolve => setTimeout(resolve, CONFIG.checkDelay));
        }
      } catch (error) {
        log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component.name}: ${error.message}`, 'ERROR');
        results.push({
          name: component.name,
          success: false,
          error: error.message
        });
      }
    } else {
      log(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç "${component.name}" –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`, 'INFO');
    }
  }
  
  // –ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ó–ê–ü–£–°–ö–ê ===', 'INFO');
  let successCount = 0;
  
  for (const result of results) {
    if (result.success) {
      successCount++;
      log(`‚úÖ ${result.name}: –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`, 'INFO');
    } else {
      log(`‚ùå ${result.name}: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞${result.error ? ` (${result.error})` : ''}`, 'ERROR');
    }
  }
  
  log(`\n–ò—Ç–æ–≥–æ: –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ ${successCount} –∏–∑ ${results.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`, 'INFO');
  
  if (successCount < results.length) {
    log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã!', 'WARN');
    log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.', 'INFO');
  } else {
    log('üöÄ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!', 'INFO');
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
 */
async function main() {
  log('\n=================================================', 'INFO');
  log('–ó–ê–ü–£–°–ö –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê', 'INFO');
  log('=================================================\n', 'INFO');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
  if (isScriptRunning()) {
    log('–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.', 'ERROR');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (!checkDependencies()) {
    log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.', 'ERROR');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  checkTelegramConfig();
  
  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ PID —Ñ–∞–π–ª—ã
  cleanupOldPids();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  try {
    await startAllComponents();
    log('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.', 'INFO');
  } catch (error) {
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'ERROR');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'ERROR');
  process.exit(1);
});
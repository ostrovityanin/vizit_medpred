/**
 * –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏:
 * - whisper-1 (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å)
 * - gpt-4o-transcribe (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å)
 * - gpt-4o-mini-transcribe (–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å)
 */

import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import FormData from 'form-data';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ OpenAI
function hasOpenAIKey() {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.error('üî¥ OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return false;
  }
  return true;
}

/**
 * –ü—Ä–æ–≥–æ–Ω—è–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –≤—Å–µ —Ç—Ä–∏ –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * @param {string} audioFilePath –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 */
async function compareTranscriptionModels(audioFilePath) {
  console.log(`üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞: ${audioFilePath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
  if (!fs.existsSync(audioFilePath)) {
    console.error(`üî¥ –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${audioFilePath}`);
    return;
  }
  
  // –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const models = [
    'whisper-1',
    'gpt-4o-transcribe',
    'gpt-4o-mini-transcribe'
  ];
  
  for (const model of models) {
    console.log(`\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${model}`);
    
    try {
      const startTime = Date.now();
      const result = await transcribeWithModel(audioFilePath, model);
      const elapsedTime = (Date.now() - startTime) / 1000;
      
      if (result) {
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (${elapsedTime.toFixed(2)}—Å): "${result}"`);
      } else {
        console.log(`‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –º–æ–¥–µ–ª–∏ ${model}`);
      }
    } catch (error) {
      console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é ${model}: ${error.message}`);
    }
  }
}

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
 * @param {string} audioFilePath –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 * @param {string} model –ú–æ–¥–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 * @returns {Promise<string|null>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
async function transcribeWithModel(audioFilePath, model) {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.error('üî¥ API –∫–ª—é—á OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return null;
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('file', fs.createReadStream(audioFilePath));
    formData.append('model', model);
    formData.append('language', 'ru'); // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`
      },
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`üî¥ –û—à–∏–±–∫–∞ API (${response.status}): ${errorText}`);
      return null;
    }
    
    const data = await response.json();
    return data.text;
  } catch (error) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${error.message}`);
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–¥–µ–ª–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏');
  
  if (!hasOpenAIKey()) {
    console.error('üî¥ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ API –∫–ª—é—á–∞ OpenAI');
    return;
  }
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  const testFiles = [
    './test_audio/test_ru.mp3',
    './test_audio/test_ru.wav',
    './test_audio/privet.mp3'
  ];
  
  for (const file of testFiles) {
    if (fs.existsSync(file)) {
      await compareTranscriptionModels(file);
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${file}`);
    }
  }
  
  console.log('\nüèÅ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(error => {
  console.error(`üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});
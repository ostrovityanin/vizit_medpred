import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { DownloadCloud, ArrowLeft, Play, X, FileText, Send, Bell, MessageSquare } from 'lucide-react';
import { Link } from 'wouter';
import FileAudioPlayer from '@/components/FileAudioPlayer';
import { sendAudioViaClientBot, notifyUserAboutRecording, sendMessageViaClientBot } from '@/lib/telegram';

interface Recording {
  id: number;
  filename: string;
  duration: number;
  timestamp: string;
  targetUsername: string;
  senderUsername?: string | null;
  fileSize?: number | null;
  transcription?: string | null;
  transcriptionCost?: string | null;
  tokensProcessed?: number | null;
  sent: boolean;
}

export default function Recordings() {
  const [recordings, setRecordings] = useState<Recording[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedRecording, setSelectedRecording] = useState<Recording | null>(null);
  const [audioPlayerVisible, setAudioPlayerVisible] = useState(false);
  const [transcriptionModalVisible, setTranscriptionModalVisible] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    fetchRecordings();
  }, []);

  const fetchRecordings = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/recordings');
      
      if (!response.ok) {
        throw new Error('Failed to fetch recordings');
      }
      
      const data = await response.json();
      setRecordings(data);
    } catch (error) {
      console.error('Error fetching recordings:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–∑–∏—Ç–æ–≤',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU');
  };

  const formatDuration = (seconds: number) => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
    if (seconds > 24 * 60 * 60) {
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ timestamp, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–µ–∫—É–Ω–¥—ã
      seconds = Math.floor(seconds / 1000);
    }
    
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const downloadRecording = (id: number) => {
    window.location.href = `/api/recordings/${id}/download`;
  };
  
  const playRecording = (id: number) => {
    const recording = recordings.find(r => r.id === id);
    if (recording) {
      setSelectedRecording(recording);
      setAudioPlayerVisible(true);
    }
  };
  
  const closeAudioPlayer = () => {
    setAudioPlayerVisible(false);
    if (!transcriptionModalVisible) {
      setSelectedRecording(null);
    }
  };
  
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç
  const sendViaClientBot = async (id: number) => {
    try {
      const recording = recordings.find(r => r.id === id);
      if (!recording) {
        throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const username = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):', recording.targetUsername);
      if (!username) return;
      
      const success = await sendAudioViaClientBot(id, username);
      
      if (success) {
        toast({
          title: '–£—Å–ø–µ—à–Ω–æ',
          description: `–ê—É–¥–∏–æ –≤–∏–∑–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username} —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç`,
          variant: 'default',
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
        fetchRecordings();
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤–∏–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Error sending via client bot:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤–∏–∑–∏—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç',
        variant: 'destructive',
      });
    }
  };
  
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç
  const sendNotificationViaClientBot = async (id: number) => {
    try {
      const recording = recordings.find(r => r.id === id);
      if (!recording) {
        throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const username = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):', recording.targetUsername);
      if (!username) return;
      
      const success = await notifyUserAboutRecording(id, username);
      
      if (success) {
        toast({
          title: '–£—Å–ø–µ—à–Ω–æ',
          description: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`,
          variant: 'default',
        });
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Error sending notification via client bot:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç',
        variant: 'destructive',
      });
    }
  };
  
  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–¥–µ—Ä–∂–∫–æ–π –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
  const sendTranscriptViaClientBot = async (id: number) => {
    try {
      const recording = recordings.find(r => r.id === id);
      if (!recording) {
        throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      if (!recording.transcription) {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–£ —ç—Ç–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
          variant: 'destructive',
        });
        return;
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const username = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ @):', recording.targetUsername);
      if (!username) return;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–¥–µ—Ä–∂–∫–æ–π –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
      const messageText = `üìù <b>–¢–µ–∫—Å—Ç –≤–∏–∑–∏—Ç–∞ –æ—Ç ${formatDate(recording.timestamp)}</b>\n\n${recording.transcription.substring(0, 1000)}${recording.transcription.length > 1000 ? '...' : ''}`;
      
      const success = await sendMessageViaClientBot(username, messageText);
      
      if (success) {
        toast({
          title: '–£—Å–ø–µ—à–Ω–æ',
          description: `–¢–µ–∫—Å—Ç –≤–∏–∑–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${username}`,
          variant: 'default',
        });
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç',
          variant: 'destructive',
        });
      }
    } catch (error) {
      console.error('Error sending transcript via client bot:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç',
        variant: 'destructive',
      });
    }
  };
  
  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
  const openTranscriptionModal = (id: number) => {
    const recording = recordings.find(r => r.id === id);
    if (recording && recording.transcription) {
      setSelectedRecording(recording);
      setTranscriptionModalVisible(true);
    } else {
      toast({
        title: '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        description: '–£ —ç—Ç–æ–≥–æ –≤–∏–∑–∏—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
        variant: 'destructive',
      });
    }
  };
  
  // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
  const closeTranscriptionModal = () => {
    setTranscriptionModalVisible(false);
    if (!audioPlayerVisible) {
      setSelectedRecording(null);
    }
  };

  return (
    <div className="w-full mx-auto px-2 py-4">
      <header className="flex items-center justify-between mb-4">
        <div className="flex items-center">
          <Link href="/">
            <Button variant="ghost" size="sm" className="mr-2">
              <ArrowLeft className="h-4 w-4 mr-1" />
              <span>–ù–∞–∑–∞–¥</span>
            </Button>
          </Link>
          <h1 className="text-xl font-bold text-tgblue">–ê—Ä—Ö–∏–≤ –≤–∏–∑–∏—Ç–æ–≤</h1>
        </div>
      </header>
      
      {loading ? (
        <div className="text-center py-8">
          <p className="text-neutral-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤...</p>
        </div>
      ) : recordings.length === 0 ? (
        <div className="text-center py-8 bg-white rounded-xl shadow-sm">
          <p className="text-neutral-500">–î–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-sm overflow-x-auto">
          <div className="min-w-full">
            <table className="w-full table-auto border-collapse text-sm">
              <thead>
                <tr className="bg-neutral-50">
                  <th className="p-2 text-left text-neutral-600 font-medium">–î–∞—Ç–∞</th>
                  <th className="p-2 text-left text-neutral-600 font-medium">–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</th>
                  <th className="p-2 text-left text-neutral-600 font-medium">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</th>
                  <th className="p-2 text-left text-neutral-600 font-medium">–†–∞–∑–º–µ—Ä</th>
                  <th className="p-2 text-left text-neutral-600 font-medium">–°—Ç–∞—Ç—É—Å</th>
                  <th className="p-2 text-left text-neutral-600 font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å</th>
                  <th className="p-2 text-left text-neutral-600 font-medium">–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</th>
                  <th className="p-2 text-right text-neutral-600 font-medium">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {recordings.map((recording) => (
                  <tr key={recording.id} className="border-t border-neutral-100 hover:bg-neutral-50">
                    <td className="p-2 text-neutral-800 whitespace-nowrap">{formatDate(recording.timestamp)}</td>
                    <td className="p-2 text-neutral-800">
                      {recording.senderUsername ? 
                        recording.senderUsername : 
                        <span className="text-neutral-400">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>}
                    </td>
                    <td className="p-2 text-neutral-800 whitespace-nowrap">{formatDuration(recording.duration)}</td>
                    <td className="p-2 text-neutral-800 whitespace-nowrap">{recording.fileSize ? `${Math.round(recording.fileSize / 1024)} KB` : "-"}</td>
                    <td className="p-2">
                      {recording.sent ? (
                        <span className="inline-block px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                          –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        </span>
                      ) : (
                        <span className="inline-block px-2 py-1 text-xs font-medium bg-amber-100 text-amber-800 rounded-full">
                          –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        </span>
                      )}
                    </td>
                    <td className="p-2 text-neutral-600">
                      {recording.transcriptionCost ? (
                        <div className="text-sm whitespace-nowrap text-green-600">
                          ${recording.transcriptionCost}
                        </div>
                      ) : (
                        <div className="text-neutral-400 text-sm">-</div>
                      )}
                    </td>
                    <td className="p-2 text-neutral-600">
                      {recording.transcription ? (
                        <div className="text-sm italic max-w-xs truncate">
                          "{recording.transcription}"
                        </div>
                      ) : (
                        <div className="text-neutral-400 text-sm">–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞</div>
                      )}
                    </td>
                    <td className="p-2 text-right whitespace-nowrap">
                      <div className="flex gap-1 justify-end">
                        {/* –ë–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                        <Button 
                          onClick={() => playRecording(recording.id)}
                          variant="outline" 
                          size="sm"
                          className="text-neutral-700"
                          title="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"
                        >
                          <Play className="h-4 w-4" />
                        </Button>
                        {recording.transcription && (
                          <Button 
                            onClick={() => openTranscriptionModal(recording.id)}
                            variant="outline" 
                            size="sm"
                            className="text-neutral-700"
                            title="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç"
                          >
                            <FileText className="h-4 w-4" />
                          </Button>
                        )}
                        <Button 
                          onClick={() => downloadRecording(recording.id)}
                          variant="outline" 
                          size="sm"
                          className="text-neutral-700"
                          title="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç–∞"
                        >
                          <DownloadCloud className="h-4 w-4" />
                        </Button>
                        
                        {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ */}
                        <Button 
                          onClick={() => sendViaClientBot(recording.id)}
                          variant="outline" 
                          size="sm"
                          className="text-blue-700 border-blue-200 hover:bg-blue-50"
                          title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç"
                        >
                          <Send className="h-4 w-4" />
                        </Button>
                        <Button 
                          onClick={() => sendNotificationViaClientBot(recording.id)}
                          variant="outline" 
                          size="sm"
                          className="text-amber-700 border-amber-200 hover:bg-amber-50"
                          title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç"
                        >
                          <Bell className="h-4 w-4" />
                        </Button>
                        {recording.transcription && (
                          <Button 
                            onClick={() => sendTranscriptViaClientBot(recording.id)}
                            variant="outline" 
                            size="sm"
                            className="text-green-700 border-green-200 hover:bg-green-50"
                            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç"
                          >
                            <MessageSquare className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <div className="mt-8 p-4 bg-blue-50 border border-blue-100 rounded-lg">
        <h3 className="text-blue-800 font-medium mb-2">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</h3>
        <p className="text-sm text-blue-700 mb-2">
          –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤—É—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤:
        </p>
        <ul className="text-sm text-blue-700 list-disc pl-5 space-y-1">
          <li>
            <strong>@KashMenBot</strong> - –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç–æ–≤
          </li>
          <li>
            <strong>@MedPredRuBot</strong> - –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç –¥–ª—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
          </li>
        </ul>
        <div className="mt-3 text-sm text-blue-700">
          <p className="mb-2"><strong>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:</strong></p>
          <ul className="list-disc pl-5 space-y-1">
            <li><span className="text-blue-700">üì©</span> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç</li>
            <li><span className="text-amber-700">üîî</span> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤–∏–∑–∏—Ç–µ</li>
            <li><span className="text-green-700">üí¨</span> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</li>
          </ul>
        </div>
        <p className="text-sm text-blue-700 mt-3">
          –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –±–æ—Ç—É.
        </p>
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä–∞ */}
      {audioPlayerVisible && selectedRecording && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg w-full max-w-md mx-4 p-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–∞</h3>
              <Button variant="ghost" size="sm" onClick={closeAudioPlayer}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <FileAudioPlayer 
              audioUrl={`/api/recordings/${selectedRecording.id}/download`} 
              filename={selectedRecording.filename}
            />
            
            <div className="mt-4 text-sm text-neutral-500">
              <div>–ó–∞–ø–∏—Å–∞–Ω–æ: {formatDate(selectedRecording.timestamp)}</div>
              {selectedRecording.senderUsername && (
                <div>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {selectedRecording.senderUsername}</div>
              )}
              {selectedRecording.transcriptionCost && (
                <div className="text-green-600">
                  –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${selectedRecording.transcriptionCost}
                  {selectedRecording.tokensProcessed && ` (${selectedRecording.tokensProcessed} —Ç–æ–∫–µ–Ω–æ–≤)`}
                </div>
              )}
              {selectedRecording.transcription && (
                <div className="flex justify-between items-center mt-2">
                  <div className="text-sm line-clamp-2 italic overflow-hidden text-neutral-600">
                    "{selectedRecording.transcription.substring(0, 150)}
                    {selectedRecording.transcription.length > 150 ? '...' : ''}"
                  </div>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    className="ml-2 flex-shrink-0"
                    onClick={() => {
                      closeAudioPlayer();
                      openTranscriptionModal(selectedRecording.id);
                    }}
                  >
                    <FileText className="h-4 w-4 mr-1" />
                    <span>–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç</span>
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ */}
      {transcriptionModalVisible && selectedRecording && selectedRecording.transcription && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg w-full max-w-2xl mx-4 p-5 max-h-[80vh] flex flex-col">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</h3>
              <Button variant="ghost" size="sm" onClick={closeTranscriptionModal}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            
            <div className="overflow-y-auto flex-1 pr-2">
              <div className="text-neutral-800 whitespace-pre-wrap text-sm leading-relaxed bg-neutral-50 p-4 rounded-lg">
                {selectedRecording.transcription?.split('\n').map((line, index) => {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–≤–æ—Ä—è—â–µ–º
                  const speakerMatch = line.match(/^([–ê-–Ø–∞-—è]+(?:\s[0-9])?|[A-Za-z]+(?:\s[0-9])?):(.+)$/);
                  
                  if (speakerMatch) {
                    const [, speaker, speech] = speakerMatch;
                    return (
                      <div key={index} className="mb-2">
                        <span className="font-semibold text-tgblue">{speaker}:</span>
                        <span>{speech}</span>
                      </div>
                    );
                  } else {
                    return <div key={index} className="mb-2">{line}</div>;
                  }
                })}
              </div>
            </div>
            
            <div className="mt-4 flex justify-between items-center">
              <div className="text-xs text-neutral-500 space-y-1">
                <div>–ó–∞–ø–∏—Å–∞–Ω–æ: {formatDate(selectedRecording.timestamp)}</div>
                {selectedRecording.transcriptionCost && (
                  <div className="text-green-600">
                    –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ${selectedRecording.transcriptionCost}
                    {selectedRecording.tokensProcessed && ` (${selectedRecording.tokensProcessed} —Ç–æ–∫–µ–Ω–æ–≤)`}
                  </div>
                )}
              </div>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => {
                  closeTranscriptionModal();
                  playRecording(selectedRecording.id);
                }}
              >
                <Play className="h-4 w-4 mr-1" />
                <span>–°–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ –≤–∏–∑–∏—Ç–∞</span>
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
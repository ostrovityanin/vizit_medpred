/**
 * –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
 * 
 * –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 * –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª.
 */

// –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
const fs = require('fs');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const { CronJob } = require('cron');
const path = require('path');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

// –§–∞–π–ª—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_FILE = 'monitoring-service.log';

// URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
const serviceUrl = 'http://localhost:5000/health';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const CONFIG = {
  checkInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  alertThreshold: 3,    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º
  restartCommand: 'npm run dev',
  workingDirectory: process.cwd(),
  maxRestarts: 3,       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
  restartInterval: 120000 // 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: false });

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let failedChecks = 0;
let lastRestartTime = 0;
let restartCount = 0;
let lastStatus = null;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
function writeLog(message, type = 'INFO') {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] [${type}] ${message}\n`;
  
  try {
    fs.appendFileSync(LOG_FILE, logMessage);
  } catch (error) {
    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${error.message}`);
    console.log(logMessage);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
writeLog(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
writeLog(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Telegram: ${token ? '–î–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)' : '–ù–µ—Ç'}`);
writeLog(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Chat ID: ${chatId || '–ù–µ—Ç'}`);
writeLog(`üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Å–µ—Ä–≤–∏—Å: ${serviceUrl}`);
writeLog(`‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: ${CONFIG.checkInterval / 1000} —Å–µ–∫—É–Ω–¥`);
writeLog(`üîÑ –ü–æ—Ä–æ–≥ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: ${CONFIG.alertThreshold} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫`);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
async function checkHealth() {
  try {
    const startTime = Date.now();
    const response = await axios.get(serviceUrl, { timeout: 5000 });
    const responseTime = Date.now() - startTime;
    
    const isHealthy = response.data.status === 'ok';
    const status = {
      healthy: isHealthy,
      responseTime: responseTime,
      uptime: response.data.uptime,
      memory: response.data.memory,
      timestamp: new Date().toISOString()
    };
    
    writeLog(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${isHealthy ? '‚úÖ –ó–î–û–†–û–í' : '‚ùå –ü–†–û–ë–õ–ï–ú–ê'} (${responseTime}ms)`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
    if (isHealthy && failedChecks > 0) {
      if (failedChecks >= CONFIG.alertThreshold) {
        await sendRecoveryAlert();
      }
      failedChecks = 0;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å
    lastStatus = status;
    
    return status;
  } catch (error) {
    writeLog(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'ERROR');
    
    failedChecks++;
    if (failedChecks >= CONFIG.alertThreshold) {
      writeLog(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ (${failedChecks}/${CONFIG.alertThreshold})`, 'WARNING');
      await handleServerFailure(error);
    } else {
      writeLog(`–£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (${failedChecks}/${CONFIG.alertThreshold})`, 'WARNING');
    }
    
    return {
      healthy: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±–æ—è —Å–µ—Ä–≤–µ—Ä–∞
async function handleServerFailure(error) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
    const now = Date.now();
    const canRestart = (now - lastRestartTime > CONFIG.restartInterval) && 
                      (restartCount < CONFIG.maxRestarts);
    
    if (canRestart) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
      await sendFailureAlert(error, true);
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      await restartServer();
    } else {
      // –¢–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
      await sendFailureAlert(error, false);
      
      if (restartCount >= CONFIG.maxRestarts) {
        writeLog(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${restartCount}/${CONFIG.maxRestarts})`, 'WARNING');
      } else {
        writeLog(`–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...`, 'INFO');
      }
    }
  } catch (alertError) {
    writeLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–±–æ—è: ${alertError.message}`, 'ERROR');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function restartServer() {
  writeLog(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...`, 'INFO');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
  if (serverProcess && !serverProcess.killed) {
    writeLog(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...`, 'INFO');
    try {
      serverProcess.kill('SIGTERM');
      // –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
      await new Promise(resolve => setTimeout(resolve, 5000));
    } catch (killError) {
      writeLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${killError.message}`, 'ERROR');
    }
  }
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const cmd = CONFIG.restartCommand.split(' ')[0];
    const args = CONFIG.restartCommand.split(' ').slice(1);
    
    writeLog(`–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: ${cmd} ${args.join(' ')}`, 'INFO');
    
    serverProcess = require('child_process').spawn(cmd, args, {
      cwd: CONFIG.workingDirectory,
      stdio: 'inherit',
      shell: true
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    lastRestartTime = Date.now();
    restartCount++;
    
    writeLog(`–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${restartCount}/${CONFIG.maxRestarts})`, 'INFO');
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    serverProcess.on('exit', (code) => {
      writeLog(`–ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`, 'WARNING');
    });
    
    serverProcess.on('error', (err) => {
      writeLog(`–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`, 'ERROR');
    });
    
    return true;
  } catch (spawnError) {
    writeLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${spawnError.message}`, 'ERROR');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message, parseMode = 'Markdown') {
  if (!token || !chatId) {
    writeLog('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'WARNING');
    return false;
  }
  
  try {
    await bot.sendMessage(chatId, message, { parse_mode: parseMode });
    writeLog(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`, 'INFO');
    return true;
  } catch (error) {
    writeLog(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${error.message}`, 'ERROR');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ–µ
async function sendFailureAlert(error, willRestart = false) {
  const message = `
üî¥ *–°–ë–û–ô –û–°–ù–û–í–ù–û–ì–û –°–ï–†–í–ò–°–ê*

‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º–∞:* ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
‚è± *–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:* ${new Date().toLocaleString()}
üî¢ *–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫:* ${failedChecks}

${willRestart ? 'üîÑ *–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫*' : '‚ùó *–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ*'}

${restartCount > 0 ? `üìä *–ü—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:* ${restartCount}/${CONFIG.maxRestarts}` : ''}
`;
  
  return await sendTelegramMessage(message);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
async function sendRecoveryAlert() {
  const uptime = lastStatus ? lastStatus.uptime : '–ù/–î';
  const memory = lastStatus && lastStatus.memory ? 
    `${lastStatus.memory.heapUsed}/${lastStatus.memory.heapTotal}` : '–ù/–î';
  
  const message = `
üü¢ *–°–ï–†–í–ò–° –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù*

‚úÖ *–°—Ç–∞—Ç—É—Å:* –°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚è± *–í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:* ${new Date().toLocaleString()}
${restartCount > 0 ? `üîÑ *–ü–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:* ${restartCount}` : 'üîç *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ*'}
‚è≥ *–¢–µ–∫—É—â–∏–π –∞–ø—Ç–∞–π–º:* ${uptime} —Å–µ–∫
üíæ *–ü–∞–º—è—Ç—å:* ${memory}
`;
  
  return await sendTelegramMessage(message);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ Telegram
async function sendStatusToTelegram() {
  if (!token || !chatId) {
    writeLog('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram, –æ—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', 'WARNING');
    return;
  }
  
  try {
    const status = await checkHealth();
    
    let emoji = status.healthy ? 'üü¢' : 'üî¥';
    let memoryInfo = '';
    
    if (status.memory) {
      memoryInfo = `
üíæ *–ü–∞–º—è—Ç—å:* ${status.memory.heapUsed}/${status.memory.heapTotal}`;
    }
    
    const message = `
${emoji} *–°—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞*

‚è± *–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* ${new Date().toLocaleString()}
üîÑ *–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:* ${status.responseTime || '–ù/–î'} –º—Å
‚è≥ *–ê–ø—Ç–∞–π–º:* ${status.uptime || '–ù/–î'} —Å–µ–∫${memoryInfo}
${status.error ? `\n‚ùå *–û—à–∏–±–∫–∞:* ${status.error}` : ''}
`;
    
    await sendTelegramMessage(message);
  } catch (error) {
    writeLog(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`, 'ERROR');
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
function startHealthCheck() {
  writeLog(`–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ ${CONFIG.checkInterval / 1000} —Å–µ–∫—É–Ω–¥`, 'INFO');
  
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –±—ã–ª
  if (global.healthCheckInterval) {
    clearInterval(global.healthCheckInterval);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
  global.healthCheckInterval = setInterval(async () => {
    try {
      await checkHealth();
    } catch (error) {
      writeLog(`–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'ERROR');
    }
  }, CONFIG.checkInterval);
  
  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  checkHealth();
  
  return global.healthCheckInterval;
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
const statusJob = new CronJob('0 */5 * * * *', sendStatusToTelegram); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
statusJob.start();

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
startHealthCheck();

// –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
sendStatusToTelegram();

writeLog('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω', 'INFO');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  writeLog('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'INFO');
  process.exit(0);
});

process.on('uncaughtException', (err) => {
  writeLog(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${err.message}`, 'ERROR');
  writeLog(err.stack, 'ERROR');
});

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ –ª–æ–≥
writeLog(`–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å PID ${process.pid}`, 'INFO');
/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
 */
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs-extra');
const path = require('path');
const logger = require('./logger').createLogger('telegram');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;

// ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const chatId = process.env.TELEGRAM_CHAT_ID;

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
const MAX_MESSAGE_LENGTH = 4096;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const MESSAGES_LOG_FILE = path.join(process.env.STATUS_LOG_PATH || './status_logs', 'telegram_messages.json');

// –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
let messageHistory = [];

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
 */
let bot = null;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Telegram –±–æ—Ç
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function isTelegramConfigured() {
  return !!token && !!chatId;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ Telegram
 */
function initializeBot() {
  if (!isTelegramConfigured()) {
    logger.warn('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID.');
    return false;
  }
  
  try {
    bot = new TelegramBot(token, { polling: false });
    logger.info('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    loadMessageHistory();
    
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ${error.message}`);
    return false;
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function loadMessageHistory() {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.ensureDir(path.dirname(MESSAGES_LOG_FILE));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (await fs.pathExists(MESSAGES_LOG_FILE)) {
      messageHistory = await fs.readJson(MESSAGES_LOG_FILE);
      logger.debug(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messageHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏`);
    } else {
      messageHistory = [];
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
      await fs.writeJson(MESSAGES_LOG_FILE, [], { spaces: 2 });
      logger.debug('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${error.message}`);
    messageHistory = [];
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function saveMessageHistory() {
  try {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (messageHistory.length > 100) {
      messageHistory = messageHistory.slice(-100);
    }
    
    await fs.writeJson(MESSAGES_LOG_FILE, messageHistory, { spaces: 2 });
    logger.debug('–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${error.message}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} type –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (report, alert, recovery)
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendMessage(message, type = 'report') {
  if (!bot) {
    if (!initializeBot()) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return false;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
  if (message.length > MAX_MESSAGE_LENGTH) {
    message = message.substring(0, MAX_MESSAGE_LENGTH - 100) + '...\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram]';
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const result = await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const messageRecord = {
      timestamp: new Date().toISOString(),
      content: message,
      type,
      messageId: result.message_id
    };
    
    messageHistory.push(messageRecord);
    await saveMessageHistory();
    
    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "${type}" –≤ Telegram`);
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (error.message.includes('parse_mode')) {
      try {
        await bot.sendMessage(chatId, message);
        logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return true;
      } catch (secondError) {
        logger.error(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${secondError.message}`);
      }
    }
    
    return false;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 * @param {Object} status –û–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendStatusReport(status) {
  const { services, system, timestamp } = status;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const dateStr = new Date(timestamp).toLocaleString();
  let message = `üìä *–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã*\n`;
  message += `üïê ${dateStr}\n\n`;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
  message += `*–°–∏—Å—Ç–µ–º–∞:*\n`;
  message += `‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${formatUptime(system.uptime)}\n`;
  message += `üíæ –ü–∞–º—è—Ç—å: ${formatMemory(system.memoryUsed, system.memoryTotal)}\n\n`;
  
  // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
  message += `*–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:*\n`;
  
  // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  const totalServices = Object.keys(services).length;
  const activeServices = Object.values(services).filter(s => s.active).length;
  message += `‚úÖ –ê–∫—Ç–∏–≤–Ω–æ: ${activeServices}/${totalServices}\n\n`;
  
  // –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
  Object.values(services).forEach(service => {
    const statusIcon = service.active ? 'üü¢' : 'üî¥';
    const responseTime = service.responseTime ? `${service.responseTime}ms` : '–Ω/–¥';
    
    message += `${statusIcon} *${service.name}*: ${service.active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'} (${responseTime})\n`;
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
  return await sendMessage(message, 'report');
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
 * @param {Array} downServices –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendDownServicesAlert(downServices) {
  if (!downServices || downServices.length === 0) {
    return false;
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  let message = `‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã*\n\n`;
  
  // –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  downServices.forEach(service => {
    const downSince = service.downSince 
      ? `—Å ${new Date(service.downSince).toLocaleTimeString()}`
      : '–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    message += `üî¥ *${service.name}* –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ${downSince}\n`;
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
  return await sendMessage(message, 'alert');
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
 * @param {Object} recoveryEvent –°–æ–±—ã—Ç–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendRecoveryAlert(recoveryEvent) {
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  let message = `‚úÖ *–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–†–í–ò–°–ê*\n\n`;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
  message += `üü¢ –°–µ—Ä–≤–∏—Å *${recoveryEvent.service}* –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n`;
  message += `‚è± –í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: ${formatDuration(recoveryEvent.downtime)}\n`;
  message += `üïê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: ${new Date(recoveryEvent.timestamp).toLocaleTimeString()}\n`;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  return await sendMessage(message, 'recovery');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} seconds –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatUptime(seconds) {
  const days = Math.floor(seconds / 86400);
  const hours = Math.floor((seconds % 86400) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  
  if (days > 0) {
    return `${days}–¥ ${hours}—á ${minutes}–º`;
  } else if (hours > 0) {
    return `${hours}—á ${minutes}–º`;
  } else {
    return `${minutes}–º ${Math.floor(seconds % 60)}—Å`;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} used –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å –≤ –±–∞–π—Ç–∞—Ö
 * @param {number} total –û–±—â–∞—è –ø–∞–º—è—Ç—å –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
function formatMemory(used, total) {
  const usedMB = Math.round(used / 1024 / 1024);
  const totalMB = Math.round(total / 1024 / 1024);
  return `${usedMB}MB / ${totalMB}MB`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 * @param {number} seconds –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
function formatDuration(seconds) {
  if (seconds < 60) {
    return `${seconds} —Å–µ–∫`;
  } else if (seconds < 3600) {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes} –º–∏–Ω ${secs} —Å–µ–∫`;
  } else {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return `${hours} —á ${minutes} –º–∏–Ω`;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * @returns {Array} –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 */
function getMessageHistory() {
  return messageHistory;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
 * @param {string} imageBuffer –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @param {string} caption –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendImage(imageBuffer, caption = '') {
  if (!bot) {
    if (!initializeBot()) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return false;
    }
  }
  
  try {
    await bot.sendPhoto(chatId, imageBuffer, { caption });
    logger.info('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
    return false;
  }
}

module.exports = {
  initializeBot,
  isTelegramConfigured,
  sendMessage,
  sendStatusReport,
  sendDownServicesAlert,
  sendRecoveryAlert,
  sendImage,
  getMessageHistory
};
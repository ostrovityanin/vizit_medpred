/**
 * –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { sendTelegramMessage } = require('../telegram-service/telegram-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
const CONFIG = {
  // –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  mainServiceUrl: 'http://localhost:5000/health',
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  checkInterval: process.env.NODE_ENV === 'production' ? 300000 : 60000, // 5 –º–∏–Ω—É—Ç –≤ –ø—Ä–æ–¥–µ, 1 –º–∏–Ω—É—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
  // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
  logsPath: path.join(__dirname, '..', '..', 'logs', 'monitoring.log')
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const logsDir = path.dirname(CONFIG.logsPath);
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

/**
 * –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
 */
function logToFile(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  
  try {
    fs.appendFileSync(CONFIG.logsPath, logMessage);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${error.message}`);
  }
  
  // –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  console.log(message);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function checkServiceHealth() {
  try {
    const startTime = Date.now();
    const response = await axios.get(CONFIG.mainServiceUrl, { timeout: 10000 });
    const responseTime = Date.now() - startTime;
    
    const statusCode = response.status;
    const isHealthy = statusCode === 200 && response.data && response.data.status === 'ok';
    
    return {
      healthy: isHealthy,
      statusCode,
      responseTime,
      uptime: response.data?.uptime,
      memory: response.data?.memory,
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    logToFile(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: ${error.message}`);
    
    return {
      healthy: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 * @param {Object} status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
 * @returns {string} - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
 */
function formatStatusMessage(status) {
  const emoji = status.healthy ? 'üü¢' : 'üî¥';
  let message = `${emoji} *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞*\n\n`;
  
  message += `‚è± *–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* ${new Date(status.timestamp).toLocaleString()}\n`;
  message += `üîÑ *–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:* ${status.responseTime || '–ù/–î'} –º—Å\n`;
  
  if (status.uptime) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const uptime = status.uptime;
    const days = Math.floor(uptime / 86400);
    const hours = Math.floor((uptime % 86400) / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = uptime % 60;
    
    let uptimeStr = '';
    if (days > 0) uptimeStr += `${days}–¥ `;
    if (hours > 0) uptimeStr += `${hours}—á `;
    if (minutes > 0) uptimeStr += `${minutes}–º `;
    uptimeStr += `${seconds}—Å`;
    
    message += `‚è≥ *–ê–ø—Ç–∞–π–º:* ${uptimeStr}\n`;
  }
  
  if (status.memory) {
    const heapUsed = Math.round(status.memory.heapUsed / (1024 * 1024));
    const heapTotal = Math.round(status.memory.heapTotal / (1024 * 1024));
    message += `üíæ *–ü–∞–º—è—Ç—å:* ${heapUsed}MB / ${heapTotal}MB\n`;
  }
  
  if (status.error) {
    message += `\n‚ùå *–û—à–∏–±–∫–∞:* ${status.error}\n`;
  }
  
  return message;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
 * @param {Object} status - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
 */
async function sendNotification(status) {
  const message = formatStatusMessage(status);
  try {
    await sendTelegramMessage(message, { parse_mode: 'Markdown' });
    logToFile('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram');
  } catch (error) {
    logToFile(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function startMonitoring() {
  logToFile('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥-—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω');
  
  // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  const initialStatus = await checkServiceHealth();
  await sendNotification(initialStatus);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  setInterval(async () => {
    const status = await checkServiceHealth();
    logToFile(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${status.healthy ? '–ó–î–û–†–û–í' : '–ü–†–û–ë–õ–ï–ú–ê'}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–ª–∏ —Ä–∞–∑ –≤ —á–∞—Å
    const hourMark = new Date().getMinutes() === 0; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞—á–∞–ª–æ —á–∞—Å–∞
    if (!status.healthy || hourMark) {
      await sendNotification(status);
    }
  }, CONFIG.checkInterval);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
startMonitoring();

module.exports = {
  checkServiceHealth,
  startMonitoring
};
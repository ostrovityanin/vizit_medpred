/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –í–µ—Ä—Å–∏—è 3.0 - –° —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
 */
import fs from 'fs';
import { execSync } from 'child_process';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import dotenv from 'dotenv';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è ESM
dotenv.config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  pidFile: 'enhanced-monitoring.pid',
  logFile: 'enhanced-monitoring.log',
  serviceUrl: 'http://localhost:5000/health',
  maxLogLines: 20,
  telegramConfigRequired: true
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–ø—Ç–∞–π–º–∞
 */
function formatUptime(seconds) {
  if (isNaN(seconds)) return '–ù/–î';
  
  const days = Math.floor(seconds / 86400);
  const hours = Math.floor((seconds % 86400) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  
  let formatted = '';
  if (days > 0) formatted += `${days}–¥ `;
  if (hours > 0 || days > 0) formatted += `${hours}—á `;
  if (minutes > 0 || hours > 0 || days > 0) formatted += `${minutes}–º `;
  formatted += `${remainingSeconds}—Å`;
  
  return formatted;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
 * @param {number} pid PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
 */
function isProcessRunning(pid) {
  try {
    process.kill(pid, 0);
    return true;
  } catch (e) {
    return false;
  }
}

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∏–º–µ–Ω–∏
 * @returns {Array<{pid: number, cmd: string, memory: string, cpu: string}>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
 */
function findMonitoringProcesses() {
  try {
    const processName = 'enhanced-monitor.mjs';
    let processes = [];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É ps –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏–º–µ–Ω–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    try {
      const output = execSync(`ps aux | grep "${processName}" | grep -v grep`).toString();
      const lines = output.split('\n').filter(Boolean);
      
      for (const line of lines) {
        const parts = line.trim().split(/\s+/);
        if (parts.length > 10) {
          const pid = parseInt(parts[1]);
          if (!isNaN(pid)) {
            processes.push({
              pid: pid,
              user: parts[0],
              cpu: parts[2] + '%',
              memory: parts[3] + '%',
              startTime: parts[8],
              runtime: parts[9],
              cmd: parts.slice(10).join(' ')
            });
          }
        }
      }
    } catch (e) {
      // –ï—Å–ª–∏ grep –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ—Ü–µ—Å—Å—ã, –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–π –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
      console.log(`üîç –ü—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ ps`);
    }
    
    return processes;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:`, error.message);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
 */
function getRecentLogs() {
  try {
    if (!fs.existsSync(CONFIG.logFile)) {
      return [`‚ùå –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${CONFIG.logFile}`];
    }
    
    const logContent = fs.readFileSync(CONFIG.logFile, 'utf8');
    const logLines = logContent.split('\n').filter(Boolean);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
    return logLines.slice(-CONFIG.maxLogLines);
  } catch (error) {
    return [`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: ${error.message}`];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
 * @returns {{configured: boolean, token: boolean, chatId: boolean, errorMsg: string|null}} –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function checkTelegramConfig() {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;
  
  const result = {
    configured: !!(token && chatId),
    token: !!token,
    chatId: !!chatId,
    errorMsg: null
  };
  
  if (!token && !chatId) {
    result.errorMsg = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID";
  } else if (!token) {
    result.errorMsg = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_BOT_TOKEN";
  } else if (!chatId) {
    result.errorMsg = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω TELEGRAM_CHAT_ID";
  }
  
  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function checkServiceHealth() {
  try {
    const startTime = Date.now();
    const response = await axios.get(CONFIG.serviceUrl, { timeout: 5000 });
    const responseTime = Date.now() - startTime;
    
    return {
      available: true,
      status: response.data.status,
      responseTime: responseTime,
      uptime: response.data.uptime,
      memory: response.data.memory,
      error: null
    };
  } catch (error) {
    return {
      available: false,
      status: 'error',
      responseTime: null,
      uptime: null,
      memory: null,
      error: error.message
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–∏—Å—Ç–µ–º—ã
 * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
async function getMonitoringStatus() {
  const status = {
    monitoringActive: false,
    pid: null,
    processList: [],
    mainServiceAvailable: false,
    mainServiceData: null,
    telegramConfigured: false,
    telegramConfig: null,
    recentLogs: [],
    pidFileExists: false,
    logFileExists: false
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PID —Ñ–∞–π–ª–∞
  try {
    status.pidFileExists = fs.existsSync(CONFIG.pidFile);
    if (status.pidFileExists) {
      status.pid = parseInt(fs.readFileSync(CONFIG.pidFile, 'utf8').trim());
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
      if (!isNaN(status.pid)) {
        status.monitoringActive = isProcessRunning(status.pid);
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PID —Ñ–∞–π–ª–∞:`, error.message);
  }
  
  // –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
  status.processList = findMonitoringProcesses();
  
  // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, –Ω–æ –ø–æ PID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  if (!status.monitoringActive && status.processList.length > 0) {
    status.monitoringActive = true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
  status.mainServiceData = await checkServiceHealth();
  status.mainServiceAvailable = status.mainServiceData.available;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  status.telegramConfig = checkTelegramConfig();
  status.telegramConfigured = status.telegramConfig.configured;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª
  status.logFileExists = fs.existsSync(CONFIG.logFile);
  if (status.logFileExists) {
    status.recentLogs = getRecentLogs();
  }
  
  return status;
}

/**
 * –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
 */
async function displayStatus() {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...\n`);
  
  const status = await getMonitoringStatus();
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
  console.log(`=== –û–ë–©–ò–ô –°–¢–ê–¢–£–° ===`);
  console.log(`ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${status.monitoringActive ? 'üü¢ –ê–ö–¢–ò–í–ï–ù' : 'üî¥ –ù–ï–ê–ö–¢–ò–í–ï–ù'}`);
  console.log(`üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å: ${status.mainServiceAvailable ? 'üü¢ –î–û–°–¢–£–ü–ï–ù' : 'üî¥ –ù–ï–î–û–°–¢–£–ü–ï–ù'}`);
  console.log(`üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${status.telegramConfigured ? 'üü¢ –ù–ê–°–¢–†–û–ï–ù–´' : 'üî¥ –ù–ï –ù–ê–°–¢–†–û–ï–ù–´'}`);
  console.log(`üìÑ PID —Ñ–∞–π–ª: ${status.pidFileExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
  console.log(`üìù –õ–æ–≥ —Ñ–∞–π–ª: ${status.logFileExists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (CONFIG.telegramConfigRequired && !status.telegramConfigured) {
    console.log(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: ${status.telegramConfig.errorMsg}`);
    console.log(`‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è!\n`);
  }
  
  // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  console.log(`=== –î–ï–¢–ê–õ–ò –ü–†–û–¶–ï–°–°–û–í ===`);
  if (status.pid) {
    console.log(`üìå PID –∏–∑ —Ñ–∞–π–ª–∞: ${status.pid} (${isProcessRunning(status.pid) ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'})`);
  }
  
  if (status.processList.length > 0) {
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${status.processList.length}`);
    status.processList.forEach((proc, idx) => {
      console.log(`\nüîπ –ü—Ä–æ—Ü–µ—Å—Å #${idx + 1}:`);
      console.log(`   PID: ${proc.pid}`);
      console.log(`   CPU: ${proc.cpu}`);
      console.log(`   –ü–∞–º—è—Ç—å: ${proc.memory}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${proc.user}`);
      console.log(`   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${proc.startTime}`);
      console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${proc.cmd}`);
    });
  } else {
    console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ`);
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å–Ω–æ–≤–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ
  console.log(`\n=== –°–¢–ê–¢–£–° –û–°–ù–û–í–ù–û–ì–û –°–ï–†–í–ò–°–ê ===`);
  if (status.mainServiceAvailable) {
    const data = status.mainServiceData;
    console.log(`‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (${data.status})`);
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${data.responseTime} –º—Å`);
    console.log(`‚è≥ –ê–ø—Ç–∞–π–º: ${formatUptime(data.uptime)}`);
    
    if (data.memory) {
      console.log(`üíæ –ü–∞–º—è—Ç—å: ${data.memory.heapUsed} / ${data.memory.heapTotal}`);
    }
  } else {
    console.log(`‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${status.mainServiceData.error}`);
  }
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
  console.log(`\n=== –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò –õ–û–ì–ê ===`);
  if (status.recentLogs.length > 0) {
    console.log(`üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${status.recentLogs.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–≥–∞:`);
    status.recentLogs.forEach((line, idx) => {
      console.log(`${idx + 1}. ${line}`);
    });
  } else {
    console.log(`‚ÑπÔ∏è –õ–æ–≥-–∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
  }
  
  console.log(`\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===`);
  if (!status.monitoringActive) {
    console.log(`‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:`);
    console.log(`   node start-enhanced-monitoring.js`);
  } else if (!status.telegramConfigured && CONFIG.telegramConfigRequired) {
    console.log(`‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`);
    console.log(`   TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID`);
  } else if (!status.mainServiceAvailable) {
    console.log(`üîÑ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ.`);
  } else {
    console.log(`‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!`);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
displayStatus();
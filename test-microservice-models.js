/**
 * –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, —Ç–∞–∫ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
 * —á–µ—Ä–µ–∑ endpoint /api/transcribe/compare
 */

import fs from 'fs';
import FormData from 'form-data';
import fetch from 'node-fetch';
import { spawn } from 'child_process';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVICE_URL = 'http://localhost:3100';
const TEST_FILES = [
  './test_audio/test_ru.mp3',
  './test_audio/privet.mp3'
];

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
 * @returns {Promise<boolean>} –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
 */
async function isServiceReady() {
  try {
    const response = await fetch(`${SERVICE_URL}/health`);
    return response.ok;
  } catch (error) {
    return false;
  }
}

/**
 * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * @param {number} ms –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<void>}
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 * @returns {Promise<ChildProcess>} –ü—Ä–æ—Ü–µ—Å—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 */
async function startService() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...');
  
  const serviceProcess = spawn('node', ['start-gpt4o-service.js'], {
    detached: false,
    stdio: 'inherit'
  });
  
  serviceProcess.on('error', (error) => {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: ${error.message}`);
  });
  
  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    attempts++;
    
    if (await isServiceReady()) {
      console.log('‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
      return serviceProcess;
    }
    
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (${attempts}/${maxAttempts})...`);
    await sleep(1000);
  }
  
  throw new Error('üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å');
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 * @param {ChildProcess} serviceProcess –ü—Ä–æ—Ü–µ—Å—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 */
function stopService(serviceProcess) {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...');
  
  if (serviceProcess) {
    serviceProcess.kill();
  }
}

/**
 * –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 * @param {string} audioFile –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 */
async function testStandardTranscription(audioFile) {
  console.log(`\nüîç –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ–∞–π–ª–∞: ${audioFile}`);
  
  try {
    if (!fs.existsSync(audioFile)) {
      console.error(`üî¥ –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${audioFile}`);
      return;
    }
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(audioFile));
    formData.append('language', 'ru');
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/transcribe...');
    const response = await fetch(`${SERVICE_URL}/api/transcribe`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`üî¥ –û—à–∏–±–∫–∞ API (${response.status}): ${errorText}`);
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:');
    console.log(`  üìù –¢–µ–∫—Å—Ç: "${result.text}"`);
    console.log(`  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime} —Å–µ–∫`);
    console.log(`  üè∑Ô∏è –ú–æ–¥–µ–ª—å: ${result.model}`);
  } catch (error) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
 * @param {string} audioFile –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 */
async function testComparisonEndpoint(audioFile) {
  console.log(`\nüîç –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ–∞–π–ª–∞: ${audioFile}`);
  
  try {
    if (!fs.existsSync(audioFile)) {
      console.error(`üî¥ –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${audioFile}`);
      return;
    }
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(audioFile));
    formData.append('language', 'ru');
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/transcribe/compare...');
    const response = await fetch(`${SERVICE_URL}/api/transcribe/compare`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`üî¥ –û—à–∏–±–∫–∞ API (${response.status}): ${errorText}`);
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:');
    console.log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.totalProcessingTime} —Å–µ–∫\n`);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    for (const [model, data] of Object.entries(result.results)) {
      if (data.error) {
        console.log(`  üî¥ –ú–æ–¥–µ–ª—å ${model}: –û—à–∏–±–∫–∞ - ${data.error}`);
      } else {
        console.log(`  üè∑Ô∏è –ú–æ–¥–µ–ª—å ${model} (${data.processingTime} —Å–µ–∫):`);
        console.log(`     "${data.text}"`);
      }
    }
  } catch (error) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

/**
 * –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –æ–ø—Ü–∏–µ–π detailed
 * @param {string} audioFile –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 */
async function testDetailedTranscription(audioFile) {
  console.log(`\nüîç –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ–∞–π–ª–∞: ${audioFile}`);
  
  try {
    if (!fs.existsSync(audioFile)) {
      console.error(`üî¥ –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${audioFile}`);
      return;
    }
    
    const formData = new FormData();
    formData.append('file', fs.createReadStream(audioFile));
    formData.append('language', 'ru');
    formData.append('detailed', 'true');
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/transcribe —Å detailed=true...');
    const response = await fetch(`${SERVICE_URL}/api/transcribe`, {
      method: 'POST',
      body: formData
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`üî¥ –û—à–∏–±–∫–∞ API (${response.status}): ${errorText}`);
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:');
    console.log(`  üìù –¢–µ–∫—Å—Ç: "${result.text}"`);
    console.log(`  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime} —Å–µ–∫`);
    console.log(`  üè∑Ô∏è –ú–æ–¥–µ–ª—å: ${result.model}`);
  } catch (error) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏');
  
  let serviceProcess;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–∏—Å
    if (await isServiceReady()) {
      console.log('‚úÖ –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ');
    } else {
      serviceProcess = await startService();
    }
    
    // –¢–µ—Å—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    for (const file of TEST_FILES) {
      if (!fs.existsSync(file)) {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${file}`);
        continue;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
      await testStandardTranscription(file);
      await testDetailedTranscription(file);
      await testComparisonEndpoint(file);
    }
    
    console.log('\nüèÅ –¢–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  } catch (error) {
    console.error(`üî¥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏
    if (serviceProcess) {
      stopService(serviceProcess);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(error => {
  console.error(`üî¥ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});
/**
 * –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
 * 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø–æ—Ä—Ç—É 5050
 * 3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */

import { spawn } from 'child_process';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
const SERVICE_DIR = path.join(__dirname, 'services', 'audio-diarization');
const SERVICE_SCRIPT = path.join(SERVICE_DIR, 'run.py');
const LOG_FILE = path.join(__dirname, 'diarization-service.log');
const SERVICE_URL = 'http://localhost:5050';

// –ù–∞—á–∞–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('=== –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ ===');
console.log(`–í—Ä–µ–º—è: ${new Date().toISOString()}`);
console.log(`–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${SERVICE_DIR}`);
console.log(`–°–∫—Ä–∏–ø—Ç —Å–µ—Ä–≤–∏—Å–∞: ${SERVICE_SCRIPT}`);
console.log(`–§–∞–π–ª –ª–æ–≥–æ–≤: ${LOG_FILE}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function ensureDirectoriesExist() {
  const dirs = [
    SERVICE_DIR,
    path.join(SERVICE_DIR, 'temp'),
    path.join(SERVICE_DIR, 'uploads')
  ];
  
  for (const dir of dirs) {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
    }
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
async function checkServiceHealth() {
  try {
    const response = await axios.get(`${SERVICE_URL}/health`, { timeout: 5000 });
    return response.status === 200 ? response.data : null;
  } catch (error) {
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞
async function monitorService() {
  const healthStatus = await checkServiceHealth();
  
  if (healthStatus) {
    console.log(`\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (${new Date().toLocaleTimeString()}):`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${healthStatus.status}`);
    console.log(`   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${healthStatus.uptime.toFixed(2)} —Å–µ–∫`);
    console.log(`   - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${healthStatus.timestamp}`);
    console.log(`   - URL: ${SERVICE_URL}\n`);
  } else {
    console.error(`\n‚ùå –°–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${new Date().toLocaleTimeString()})\n`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
function startService() {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  ensureDirectoriesExist();
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const logStream = fs.createWriteStream(LOG_FILE, { flags: 'a' });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –≤ –ª–æ–≥
  const timestamp = new Date().toISOString();
  logStream.write(`\n\n=== –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ ${timestamp} ===\n\n`);
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç
  const python = process.platform === 'win32' ? 'python' : 'python3';
  const serviceProcess = spawn(python, [SERVICE_SCRIPT], {
    cwd: SERVICE_DIR,
    stdio: ['ignore', 'pipe', 'pipe'],
    env: {
      ...process.env,
      PYTHONUNBUFFERED: '1'
    }
  });
  
  console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: ${serviceProcess.pid}`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º stdout
  serviceProcess.stdout.on('data', (data) => {
    const output = data.toString();
    logStream.write(output);
    console.log(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è] ${output.trim()}`);
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º stderr
  serviceProcess.stderr.on('data', (data) => {
    const output = data.toString();
    logStream.write(`[ERR] ${output}`);
    console.error(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è ERR] ${output.trim()}`);
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
  serviceProcess.on('close', (code) => {
    const exitMessage = `\n=== –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}, –≤—Ä–µ–º—è: ${new Date().toISOString()} ===\n`;
    logStream.write(exitMessage);
    console.log(exitMessage);
    logStream.end();
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ —Å–±–æ–µ
    if (code !== 0) {
      console.log('‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
      setTimeout(startService, 5000);
    }
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  setInterval(monitorService, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
  setTimeout(monitorService, 5000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
startService();
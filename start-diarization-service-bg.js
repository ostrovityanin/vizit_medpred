/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
 * –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
 */

import fs from 'fs';
import path from 'path';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import axios from 'axios';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
const SERVICE_DIR = path.join(__dirname, 'services', 'audio-diarization');
const SERVICE_SCRIPT = path.join(SERVICE_DIR, 'run.py');
const LOG_FILE = path.join(__dirname, 'diarization-service.log');
const PID_FILE = path.join(SERVICE_DIR, 'diarization-service.pid');
const SERVICE_URL = 'http://localhost:5050';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
 * @returns {Promise<boolean>} –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
 */
async function isServiceRunning() {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PID —Ñ–∞–π–ª–∞
    if (!fs.existsSync(PID_FILE)) {
      return false;
    }
    
    const pid = fs.readFileSync(PID_FILE, 'utf-8').trim();
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID
      process.kill(parseInt(pid, 10), 0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
      const response = await axios.get(`${SERVICE_URL}/health`, { timeout: 2000 });
      return response.status === 200;
    } catch (e) {
      return false;
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞: ${error.message}`);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
 */
function ensureDirectoriesExist() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
  if (!fs.existsSync(SERVICE_DIR)) {
    fs.mkdirSync(SERVICE_DIR, { recursive: true });
  }
  
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const dirs = [
    path.join(SERVICE_DIR, 'src'),
    path.join(SERVICE_DIR, 'utils'),
    path.join(SERVICE_DIR, 'temp')
  ];
  
  for (const dir of dirs) {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ HTTP
 * @returns {Promise<boolean>} –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
 */
async function checkServiceHealth() {
  try {
    const response = await axios.get(`${SERVICE_URL}/health`, { timeout: 5000 });
    return response.status === 200;
  } catch (error) {
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 */
async function startService() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–∏—Å
  const serviceRunning = await isServiceRunning();
  if (serviceRunning) {
    console.log('‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã');
    return;
  }
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...');
  ensureDirectoriesExist();
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const logStream = fs.createWriteStream(LOG_FILE, { flags: 'a' });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –≤ –ª–æ–≥
  const timestamp = new Date().toISOString();
  logStream.write(`\n\n=== –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ ${timestamp} ===\n\n`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç —Å –æ—Ç–≤—è–∑–∫–æ–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  const python = process.platform === 'win32' ? 'python' : 'python3';
  const serviceProcess = spawn(python, [SERVICE_SCRIPT], {
    cwd: SERVICE_DIR,
    detached: true, // –û—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    stdio: ['ignore', 'pipe', 'pipe'], // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –∏ stderr, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º stdin
    env: {
      ...process.env,
      PYTHONUNBUFFERED: '1' // –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞ Python
    }
  });
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ñ–∞–π–ª
  fs.writeFileSync(PID_FILE, serviceProcess.pid.toString());
  
  // –õ–æ–≥–∏—Ä—É–µ–º stdout
  serviceProcess.stdout.on('data', (data) => {
    const output = data.toString();
    logStream.write(output);
    console.log(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è] ${output.trim()}`);
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º stderr
  serviceProcess.stderr.on('data', (data) => {
    const output = data.toString();
    logStream.write(`[ERR] ${output}`);
    console.error(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è ERR] ${output.trim()}`);
  });
  
  // –û—Ç—Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ
  serviceProcess.unref();
  
  console.log(`‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∞—É–¥–∏–æ-–¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω —Å PID: ${serviceProcess.pid}`);
  console.log(`üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: ${LOG_FILE}`);
  
  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...');
  
  let attempts = 0;
  const maxAttempts = 10;
  let serviceAvailable = false;
  
  while (attempts < maxAttempts && !serviceAvailable) {
    attempts++;
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
    serviceAvailable = await checkServiceHealth();
    
    if (serviceAvailable) {
      console.log(`‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
    } else if (attempts < maxAttempts) {
      console.log(`‚è≥ –°–µ—Ä–≤–∏—Å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ... (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
    }
  }
  
  if (!serviceAvailable) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
    try {
      process.kill(serviceProcess.pid, 0);
      console.log('‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ HTTP –∑–∞–ø—Ä–æ—Å—ã');
    } catch (e) {
      console.error('‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
      
      // –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (fs.existsSync(PID_FILE)) {
        fs.unlinkSync(PID_FILE);
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –µ–≥–æ
(async () => {
  await startService();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
  try {
    const response = await axios.get(`${SERVICE_URL}/health`);
    console.log(`\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:`);
    console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
    console.log(`   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${response.data.uptime.toFixed(2)} —Å–µ–∫`);
    console.log(`   - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${response.data.timestamp}`);
  } catch (error) {
    console.error(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: ${error.message}`);
  }
})();
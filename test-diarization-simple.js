/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
 * 2. –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
 * 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
 */

import fs from 'fs';
import path from 'path';
import axios from 'axios';
import FormData from 'form-data';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { spawn } from 'child_process';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// URL –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
const DIARIZATION_SERVICE_URL = 'http://localhost:5050';
const SERVICE_DIR = path.join(__dirname, 'services', 'audio-diarization');

// –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
const TEST_AUDIO_FILE = path.join(__dirname, 'test_audio', 'test.mp3');

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
 */
async function startDiarizationService() {
  return new Promise((resolve, reject) => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const python = process.platform === 'win32' ? 'python' : 'python3';
    const serviceProcess = spawn(python, ['run.py'], {
      cwd: SERVICE_DIR,
      stdio: ['ignore', 'pipe', 'pipe'],
      env: {
        ...process.env,
        PYTHONUNBUFFERED: '1'
      }
    });
    
    console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID: ${serviceProcess.pid}`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º stdout
    serviceProcess.stdout.on('data', (data) => {
      console.log(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è] ${data.toString().trim()}`);
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º stderr
    serviceProcess.stderr.on('data', (data) => {
      console.error(`[–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è ERR] ${data.toString().trim()}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    let attempts = 0;
    const maxAttempts = 10;
    const checkInterval = setInterval(async () => {
      try {
        attempts++;
        const response = await axios.get(`${DIARIZATION_SERVICE_URL}/health`, { timeout: 1000 });
        
        if (response.status === 200) {
          clearInterval(checkInterval);
          console.log(`‚úÖ –°–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ ${attempts} –ø–æ–ø—ã—Ç–∫–∏`);
          console.log(`   - –°—Ç–∞—Ç—É—Å: ${response.data.status}`);
          console.log(`   - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${response.data.uptime.toFixed(2)} —Å–µ–∫`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          resolve({
            process: serviceProcess,
            pid: serviceProcess.pid,
            url: DIARIZATION_SERVICE_URL,
            status: response.data
          });
        }
      } catch (error) {
        if (attempts >= maxAttempts) {
          clearInterval(checkInterval);
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
          try {
            serviceProcess.kill();
          } catch (killError) {
            console.error(`   - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${killError.message}`);
          }
          
          reject(new Error(`–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`));
        } else {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})...`);
        }
      }
    }, 1000);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫
    setTimeout(() => {
      clearInterval(checkInterval);
      if (attempts >= maxAttempts) {
        console.error(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (${maxAttempts} —Å–µ–∫—É–Ω–¥)`);
        reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞'));
      }
    }, (maxAttempts + 1) * 1000);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    serviceProcess.on('close', (code) => {
      if (code !== 0) {
        clearInterval(checkInterval);
        console.error(`‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`);
        reject(new Error(`–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: ${code}`));
      }
    });
  });
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ
 * @param {string} audioFile –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
 */
async function testDiarization(audioFile) {
  try {
    console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞: ${audioFile}`);
    
    if (!fs.existsSync(audioFile)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${audioFile}`);
      return;
    }
    
    const formData = new FormData();
    formData.append('audio_file', fs.createReadStream(audioFile));
    formData.append('min_speakers', 2);
    formData.append('max_speakers', 5);
    
    console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é...`);
    
    const response = await axios.post(
      `${DIARIZATION_SERVICE_URL}/diarize`,
      formData,
      {
        headers: {
          ...formData.getHeaders(),
        },
        maxContentLength: Infinity,
        maxBodyLength: Infinity
      }
    );
    
    console.log(`‚úÖ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
    console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: ${response.data.num_speakers}`);
    console.log(`   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: ${response.data.duration.toFixed(2)} —Å–µ–∫`);
    console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${response.data.segments.length}`);
    
    // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    console.log(`\nüìù –ü—Ä–∏–º–µ—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤:`);
    
    const sampleSegments = response.data.segments.slice(0, 3);
    for (const segment of sampleSegments) {
      console.log(`   - –ì–æ–≤–æ—Ä—è—â–∏–π ${segment.speaker}, —Å ${segment.start.toFixed(2)}—Å –¥–æ ${segment.end.toFixed(2)}—Å (${(segment.end - segment.start).toFixed(2)}—Å)`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    const resultPath = path.join(__dirname, 'diarization-result.json');
    fs.writeFileSync(resultPath, JSON.stringify(response.data, null, 2));
    
    console.log(`\nüíæ –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${resultPath}`);
    
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:`);
    
    if (error.response) {
      console.error(`   - –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏: ${error.response.status}`);
      console.error(`   - –°–æ–æ–±—â–µ–Ω–∏–µ: ${JSON.stringify(error.response.data)}`);
    } else {
      console.error(`   - ${error.message}`);
    }
  }
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 * @param {Object} serviceInfo –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
 */
function stopDiarizationService(serviceInfo) {
  try {
    console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (PID: ${serviceInfo.pid})...`);
    
    if (serviceInfo.process) {
      serviceInfo.process.kill();
      console.log('‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞: ${error.message}`);
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runFullTest() {
  console.log('üî¨ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏\n');
  
  let serviceInfo = null;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(TEST_AUDIO_FILE)) {
      console.error(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${TEST_AUDIO_FILE}`);
      console.log(`üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: node generate-quick-test-audio.js`);
      return;
    }
    
    // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    serviceInfo = await startDiarizationService();
    
    // –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    await testDiarization(TEST_AUDIO_FILE);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  } catch (error) {
    console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
  } finally {
    // –®–∞–≥ 3: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
    if (serviceInfo) {
      stopDiarizationService(serviceInfo);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
runFullTest();
/**
 * –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
 */

import fs from 'fs';
import path from 'path';
import { promisify } from 'util';
import { exec as execCb } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º callback-–≤–µ—Ä—Å–∏—é exec –≤ Promise
const exec = promisify(execCb);

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ESM)
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è test_audio —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const TEST_AUDIO_DIR = path.join(__dirname, 'test_audio');
if (!fs.existsSync(TEST_AUDIO_DIR)) {
  fs.mkdirSync(TEST_AUDIO_DIR, { recursive: true });
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
 * @param {string} outputPath –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 * @param {number} frequency –ß–∞—Å—Ç–æ—Ç–∞ —Ç–æ–Ω–∞ –≤ –ì—Ü
 * @param {number} duration –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<string>} –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
async function generateTestAudio(outputPath, frequency = 440, duration = 5) {
  try {
    console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: ${outputPath} (${frequency} –ì—Ü, ${duration} —Å–µ–∫)`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é FFmpeg
    const command = `ffmpeg -f lavfi -i "sine=frequency=${frequency}:duration=${duration}" -c:a libmp3lame -q:a 2 "${outputPath}" -y`;
    
    await exec(command);
    console.log(`–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
    
    return outputPath;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: ${error.message}`);
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const testFilePath = path.join(TEST_AUDIO_DIR, 'test.mp3');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await generateTestAudio(testFilePath, 440, 3);
    
    console.log(`\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:`);
    console.log(`   ${testFilePath}`);
    console.log(`\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:`);
    console.log(`   node test-diarization-service-quick.js`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
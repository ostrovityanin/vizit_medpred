import TelegramBot from 'node-telegram-bot-api';
import { createLogger } from './logger.js';
import dotenv from 'dotenv';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è telegram
const logger = createLogger('telegram');

dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
let bot = null;
let chatId = null;

// –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
const messageQueue = [];

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –±–æ—Ç–∞
 */
export const initBot = () => {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  chatId = process.env.TELEGRAM_CHAT_ID;

  if (!token) {
    logger.warn('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    return false;
  }

  if (!chatId) {
    logger.warn('TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    return false;
  }

  try {
    bot = new TelegramBot(token, { polling: false });
    logger.info('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞
    sendMessage('üü¢ –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
    processMessageQueue();
    
    return true;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: ${error.message}`);
    return false;
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
 * @param {string} message - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
export const sendMessage = async (message) => {
  if (!bot || !chatId) {
    // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    messageQueue.push(message);
    return;
  }

  try {
    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: ${message.substring(0, 50)}...`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`);
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    messageQueue.push(message);
  }
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Telegram
 * @param {Object} report - –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
 */
export const sendStatusReport = async (report) => {
  const { serviceStatuses, systemStatus } = report;
  
  let message = `<b>üìä –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n`;
  message += `<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString()}\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
  message += `<b>–°–∏—Å—Ç–µ–º–∞:</b>\n`;
  message += `- Uptime: ${systemStatus.uptime}\n`;
  message += `- –ü–∞–º—è—Ç—å: ${systemStatus.memory}\n`;
  message += `- –ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${systemStatus.cpuLoad}%\n`;
  if (systemStatus.nodeVersion) {
    message += `- Node.js: ${systemStatus.nodeVersion}\n`;
  }
  message += `\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞—Ö
  message += `<b>–°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤:</b>\n`;
  
  for (const [service, status] of Object.entries(serviceStatuses)) {
    const emoji = status.isActive ? 'üü¢' : 'üî¥';
    message += `${emoji} <b>${service}:</b> ${status.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    if (status.responseTime) {
      message += ` (${status.responseTime}ms)`;
    }
    message += `\n`;
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω –∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (status.isActive && status.recoveryMessage) {
      message += `   ‚Üë ${status.recoveryMessage}\n`;
    }
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω –∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (status.isActive && status.uptimeSinceRecoveryMessage) {
      message += `   ‚è± ${status.uptimeSinceRecoveryMessage}\n`;
    }
    
    // –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if (!status.isActive && status.downtimeMessage) {
      message += `   ‚ö†Ô∏è ${status.downtimeMessage}\n`;
    }
  }

  await sendMessage(message);
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
 */
const processMessageQueue = async () => {
  if (messageQueue.length > 0 && bot && chatId) {
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${messageQueue.length} –Ω–∞–∫–æ–ø–∏–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram`);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –æ—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    const messagesToSend = [...messageQueue];
    messageQueue.length = 0;
    
    for (const message of messagesToSend) {
      await sendMessage(message);
      // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API Telegram
      await new Promise(resolve => setTimeout(resolve, 200));
    }
  }
};

export default { initBot, sendMessage, sendStatusReport };
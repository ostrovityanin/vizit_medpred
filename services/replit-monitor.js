/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Replit Workflow
 */
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

// URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
const serviceUrl = 'http://localhost:5000/health';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: false });

console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Replit`);
console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω Telegram: ${token ? '–î–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)' : '–ù–µ—Ç'}`);
console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º Chat ID: ${chatId || '–ù–µ—Ç'}`);
console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Å–µ—Ä–≤–∏—Å: ${serviceUrl}`);

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
async function checkHealth() {
  try {
    const startTime = Date.now();
    const response = await axios.get(serviceUrl, { timeout: 5000 });
    const responseTime = Date.now() - startTime;
    
    const isHealthy = response.data.status === 'ok';
    const status = {
      healthy: isHealthy,
      responseTime: responseTime,
      uptime: response.data.uptime,
      memory: response.data.memory,
      timestamp: new Date().toISOString()
    };
    
    console.log(`[${new Date().toLocaleTimeString()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:`, 
      isHealthy ? '–ó–î–û–†–û–í' : '–ü–†–û–ë–õ–ï–ú–ê', 
      `(${responseTime}ms)`);
    
    return status;
  } catch (error) {
    console.error(`[${new Date().toLocaleTimeString()}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:`, error.message);
    return {
      healthy: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Telegram
async function sendStatusToTelegram() {
  if (!token || !chatId) {
    console.log('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram, –æ—Ç—á—ë—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    return;
  }
  
  try {
    const status = await checkHealth();
    
    let emoji = status.healthy ? 'üü¢' : 'üî¥';
    let memoryInfo = '';
    
    if (status.memory) {
      memoryInfo = `
üíæ *–ü–∞–º—è—Ç—å:* ${status.memory.heapUsed}/${status.memory.heapTotal}`;
    }
    
    const message = `
${emoji} *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞*

‚è± *–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* ${new Date().toLocaleString()}
üîÑ *–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:* ${status.responseTime || '–ù/–î'} –º—Å
‚è≥ *–ê–ø—Ç–∞–π–º:* ${status.uptime || '–ù/–î'} —Å–µ–∫${memoryInfo}
${status.error ? `\n‚ùå *–û—à–∏–±–∫–∞:* ${status.error}` : ''}
`;
    
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    console.log(`[${new Date().toLocaleTimeString()}] –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`);
  } catch (error) {
    console.error(`[${new Date().toLocaleTimeString()}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:`, error.message);
  }
}

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
async function monitorLoop() {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  await sendStatusToTelegram();
  
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(async () => {
    await sendStatusToTelegram();
  }, 5 * 60 * 1000);
}

monitorLoop();

// –°–æ–æ–±—â–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –æ –∑–∞–ø—É—Å–∫–µ
console.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Replit Workflow');
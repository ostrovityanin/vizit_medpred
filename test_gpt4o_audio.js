/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT-4o Audio Preview –≤ NodeJS
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPT-4o Audio Preview
 * —á–µ—Ä–µ–∑ fetch API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
 */

const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –∫–ª—é—á–∞
function hasOpenAIKey() {
  return !!process.env.OPENAI_API_KEY;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ Base64
function encodeAudioToBase64(audioFilePath) {
  try {
    const audioBuffer = fs.readFileSync(audioFilePath);
    return audioBuffer.toString('base64');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: ${error.message}`);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é GPT-4o
async function transcribeWithGPT4o(audioFilePath) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!hasOpenAIKey()) {
      console.error('OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return null;
    }

    // –ö–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ Base64
    console.log(`–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: ${audioFilePath}`);
    const audioBase64 = encodeAudioToBase64(audioFilePath);
    if (!audioBase64) {
      return null;
    }

    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ GPT-4o...');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç–æ –∞—É–¥–∏–æ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–π –≥–æ–≤–æ—Ä—è—â–∏—Ö. –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –¥–∏–∞–ª–æ–≥–∞.'
              },
              {
                type: 'audio_url',
                audio_url: {
                  url: `data:audio/mp3;base64,${audioBase64}`
                }
              }
            ]
          }
        ]
      })
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`–û—à–∏–±–∫–∞ API: ${response.status} - ${errorText}`);
      return null;
    }

    const data = await response.json();
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT-4o');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
    return {
      text: data.choices[0].message.content,
      usage: data.usage
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  console.log('====================================');
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT-4o Audio Preview API');
  console.log('====================================');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
  if (!hasOpenAIKey()) {
    console.error('‚ùå –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    return;
  }

  // –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
  const testFiles = [
    'attached_assets/35303ed6-9bbf-4df4-910f-be0193dc2a4e.jfif',
    'temp/recording_sample.mp3',
    'temp/recording_test.wav'
  ];

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å
  let successfulTranscription = false;
  for (const filePath of testFiles) {
    const fullPath = path.resolve(filePath);
    
    if (fs.existsSync(fullPath)) {
      console.log(`\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: ${fullPath}`);
      
      const startTime = Date.now();
      const result = await transcribeWithGPT4o(fullPath);
      const elapsedSeconds = (Date.now() - startTime) / 1000;
      
      if (result && result.text) {
        successfulTranscription = true;
        console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${elapsedSeconds.toFixed(2)} —Å–µ–∫`);
        console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.usage.total_tokens} (–≤—Ö–æ–¥: ${result.usage.prompt_tokens}, –≤—ã—Ö–æ–¥: ${result.usage.completion_tokens})`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        const outputPath = `temp/transcription_${path.basename(filePath)}.txt`;
        fs.writeFileSync(outputPath, result.text);
        console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${outputPath}`);
        
        // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        console.log('\n–ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:');
        console.log('------------------------------------');
        console.log(result.text.substring(0, 300) + (result.text.length > 300 ? '...' : ''));
        console.log('------------------------------------');
        
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        break;
      } else {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${fullPath}`);
      }
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullPath}`);
    }
  }

  if (!successfulTranscription) {
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è');
  }

  console.log('\n====================================');
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT-4o Audio Preview API –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('====================================');
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(error => {
  console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  console.error(error.stack);
});
import axios from 'axios';
import * as fs from 'fs';
import FormData from 'form-data';
import { log } from './vite';
import { Recording } from '@shared/schema';

/**
 * –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç (@MedPredRuBot) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –æ—Ç–ø—Ä–∞–≤–∫—É –∏–º –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
 */

// API –∫–ª—é—á –±–æ—Ç–∞ (–±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const TELEGRAM_CLIENT_BOT_TOKEN = process.env.MEDPRED_BOT_TOKEN;
const BASE_URL = `https://api.telegram.org/bot${TELEGRAM_CLIENT_BOT_TOKEN}`;

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –±–æ—Ç–µ
 */
export async function getClientBotInfo(): Promise<any> {
  try {
    if (!TELEGRAM_CLIENT_BOT_TOKEN) {
      log(`Client bot API key not provided`, 'client-bot');
      return null;
    }
    
    const response = await axios.get(`${BASE_URL}/getMe`);
    return response.data.result;
  } catch (error) {
    log(`Error getting client bot info: ${error}`, 'client-bot');
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–π) –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞
 */
export async function getClientBotUpdates(): Promise<any> {
  try {
    if (!TELEGRAM_CLIENT_BOT_TOKEN) {
      log(`Client bot API key not provided`, 'client-bot');
      return null;
    }
    
    const response = await axios.get(`${BASE_URL}/getUpdates`);
    return response.data.result;
  } catch (error) {
    log(`Error getting client bot updates: ${error}`, 'client-bot');
    return null;
  }
}

/**
 * Resolves a username to a chat_id using Telegram's getChat API (–¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞)
 */
export async function resolveClientUsername(username: string): Promise<number | string | null> {
  try {
    if (!TELEGRAM_CLIENT_BOT_TOKEN) {
      log(`Client bot API key not provided`, 'client-bot');
      return null;
    }
    
    // –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —Ç–æ —É–¥–∞–ª—è–µ–º @
    const cleanUsername = username.startsWith('@') ? username.substring(1) : username;
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.get(`${BASE_URL}/getChat`, {
      params: {
        chat_id: `@${cleanUsername}`
      }
    });
    
    if (response.data.ok && response.data.result) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
      return response.data.result.id;
    }
    
    return null;
  } catch (error) {
    log(`Error resolving username (client bot) @${username}: ${error}`, 'client-bot');
    return null;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç
 */
export async function sendClientTextMessage(
  chatId: number | string,
  message: string
): Promise<boolean> {
  try {
    if (!TELEGRAM_CLIENT_BOT_TOKEN) {
      log(`Client bot API key not provided`, 'client-bot');
      return false;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await axios.post(`${BASE_URL}/sendMessage`, {
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML'
    });
    
    if (response.data.ok) {
      log(`Text message sent to ${chatId} via client bot`, 'client-bot');
      return true;
    } else {
      log(`Failed to send text message to ${chatId} via client bot: ${response.data}`, 'client-bot');
      return false;
    }
  } catch (error) {
    log(`Error sending text message via client bot: ${error}`, 'client-bot');
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤–∏–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç
 */
export async function sendClientAudio(
  filePath: string,
  chatId: number | string,
  caption: string = "",
  transcription: string = ""
): Promise<boolean> {
  try {
    if (!TELEGRAM_CLIENT_BOT_TOKEN) {
      log(`Client bot API key not provided`, 'client-bot');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      log(`Audio file not found: ${filePath}`, 'client-bot');
      return false;
    }
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append('chat_id', chatId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç
    const MAX_CAPTION_LENGTH = 1024;
    let finalCaption = caption;
    
    if (transcription) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ –ø–æ–¥–ø–∏—Å—å
      const transcriptionText = `\n\n<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>\n${transcription}`;
      if (caption.length + transcriptionText.length <= MAX_CAPTION_LENGTH) {
        finalCaption += transcriptionText;
      }
    }
    
    // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
    if (finalCaption.length > MAX_CAPTION_LENGTH) {
      finalCaption = finalCaption.substring(0, MAX_CAPTION_LENGTH - 3) + '...';
    }
    
    formData.append('caption', finalCaption);
    formData.append('parse_mode', 'HTML'); // –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –≤ –ø–æ–¥–ø–∏—Å–∏
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ formData
    const fileStream = fs.createReadStream(filePath);
    formData.append('audio', fileStream);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await axios.post(`${BASE_URL}/sendAudio`, formData, {
      headers: {
        ...formData.getHeaders()
      }
    });
    
    if (response.data.ok) {
      log(`Audio sent to ${chatId} via client bot`, 'client-bot');
      
      // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª–∞—Å—å –≤ –ø–æ–¥–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      if (transcription && caption.length + `\n\n<b>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</b>\n${transcription}`.length > MAX_CAPTION_LENGTH) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const transcriptionMessage = `<b>–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ:</b>\n\n${transcription}`;
        await sendClientTextMessage(chatId, transcriptionMessage);
        log(`Full transcription sent as separate message to ${chatId}`, 'client-bot');
      }
      
      return true;
    } else {
      log(`Failed to send audio to ${chatId} via client bot: ${response.data}`, 'client-bot');
      return false;
    }
  } catch (error) {
    log(`Error sending audio via client bot: ${error}`, 'client-bot');
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –≤–∏–∑–∏—Ç–µ —Å –µ–≥–æ —É—á–∞—Å—Ç–∏–µ–º
 */
export async function notifyUserAboutRecording(recording: Recording, userChatId: number | string): Promise<boolean> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let message = `üéôÔ∏è <b>–ù–æ–≤—ã–π –∞—É–¥–∏–æ –≤–∏–∑–∏—Ç</b>\n\n`;
    message += `‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${formatDuration(recording.duration)}\n`;
    message += `üìÖ <b>–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞:</b> ${new Date(recording.timestamp).toLocaleString('ru')}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (recording.senderUsername) {
      message += `üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> ${recording.senderUsername}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ –±—É–¥—É—â–µ–º
    message += `üìü <b>ID –∑–∞–ø–∏—Å–∏:</b> ${recording.id}\n`;
    
    if (recording.transcription) {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä—ã–≤–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
      const previewText = recording.transcription.length > 200 
        ? recording.transcription.substring(0, 200) + '...' 
        : recording.transcription;
        
      message += `\nüìù <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n<i>${previewText}</i>`;
      
      // –ï—Å–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª–∏–Ω–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–º–µ—Å—Ç–µ —Å –∞—É–¥–∏–æ
      if (recording.transcription.length > 200) {
        message += `\n\n<i>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º</i>`;
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return await sendClientTextMessage(userChatId, message);
  } catch (error) {
    log(`Error notifying user about recording: ${error}`, 'client-bot');
    return false;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç MM:SS
 */
function formatDuration(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}